include "src/hardware.inc"
include "src/global.inc"

WITH_DEBUGHEX equ 0

inst_length equ 6
inst_epilog_length equ 5

RUNTYPE_OFF equ 0
RUNTYPE_PRESS_A equ 1
RUNTYPE_AUTO equ 2
NUM_RUNTYPES equ 3

NUM_ABOVE_REGPAIRS equ 2
NUM_REGPAIRS equ 6

; Interrupts ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; $40 is vblank_handler in ppuclear.z80
SECTION "rst48", ROM0[$0048]  ; STAT
                    ; 5
  push af           ; 4
  ld a, $48         ; 2
  ldh [last_int],a  ; 2
  pop af            ; 3
  reti              ; 4

SECTION "rst50", ROM0[$0050]  ; Timer
  push af
  ld a, $50
  ldh [last_int],a
  pop af
  reti

SECTION "rst58", ROM0[$0058]  ; Serial
  push af
  ld a, $58
  ldh [last_int],a
  pop af
  reti

SECTION "rst60", ROM0[$0060]  ; Joypad
  push af
  ld a, $60
  ldh [last_int],a
  pop af
  reti


; Instruction test ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SECTION "hCommonState", HRAM
a_pressed_by_self:: ds 1
cursor_x:: ds 1
cursor_y:: ds 1

SECTION UNION "hTestState", HRAM
inst:        ds inst_length
inst_epilog: ds inst_epilog_length
runtype: ds 1
input_regs:
input_af: ds 2
input_bc: ds 2
input_de: ds 2
input_hl: ds 2
input_sp: ds 2
input_if: ds 1
input_ie: ds 1
result_regs:
result_af: ds 2
result_bc: ds 2
result_de: ds 2
result_hl: ds 2
result_sp: ds 2
result_if: ds 1
result_ie: ds 1
sp_save: ds 2

SECTION "main", ROM0

main::
  ld a,IEF_VBLANK
  ldh [rIE],a  ; enable IRQs
  xor a
  ldh [rIF],a
  ldh [nmis],a
  ei

; JMP endpoint
inst_test::
  ; Load CHR
  call lcd_off
  call run_dma
  ld de, font_1b
  ld bc, (-320) & $FFFF
  ld hl, CHRRAM0
  .loop
    ld a, [de]
    inc de
    ld [hl+], a
    ld [hl+], a
    inc c
    jr nz, .loop
    inc b
    jr nz, .loop

  ld hl, inst_labels
  call cls_draw_labels

  ; Clear input registers as if this code was run
  ; XOR A LD B, A LD C, A LD D, A LD E, A LD H, A LD L, A LD SP, $D000
  ld c, result_regs-inst+result_regs-input_regs
  ld hl, inst
  xor a
  ldh [a_pressed_by_self], a
  ldh [cursor_x], a
  ldh [cursor_y], a
  call memset_tiny
  dec a
  ldh [last_int], a
  ld a, $D0
  ldh [input_sp+1], a
  ld a, $80
  ldh [input_af+0], a
  rlca  ; ld a, 1
  ldh [input_ie], a

  call temp_exerciser

  ld a, %11100100
  ldh [rBGP], a
  ldh [rOBP0], a
  ld a, LCDCF_ON|LCDCF_BGON|LCDCF_OBJON|LCDCF_BG8000|LCDCF_BG9800
  ldh [rLCDC], a

  call draw_input_regs
  call draw_result_regs
  call draw_inst
  call draw_runtype

forever:
  call read_pad
  call handle_input

  xor a
  ld [oam_used], a
  call draw_cursor
  call lcd_clear_oam

  call wait_vblank_irq
  call run_dma

  if WITH_DEBUGHEX
    ldxy de, 0, 17
    ld c, low(nmis)
    call draw_2dig_c
    ld c, low(cursor_x)
    call draw_2dig_c
    call draw_2dig_c
    ld c, low(runtype)
    call draw_2dig_c
  endc
  ldh a, [new_keys]
  bit PADB_SELECT, a
  jr z, forever
  jp sound_test

; Instruction execution ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

run_inst:
  ; Write the instruction epilog
  ld hl, inst_epilog_src
  ld de, inst_epilog
  ld bc, inst_epilog_length
  call memcpy
  ld a, $ff
  ldh [last_int], a

  ; Save stack for return
  di
  ld [sp_save], sp

  ; Load input register values
  ldh a, [input_if]
  ldh [rIF], a
  ldh a, [input_ie]
  ldh [rIE], a
  ld sp, input_regs
  pop af
  pop bc
  pop de
  pop hl  ; ignored; will load H, L, A later
  pop hl
  ld sp, hl
  ldh a, [input_hl+0]
  ld l, a
  ldh a, [input_hl+1]
  ld h, a
  ldh a, [input_af+1]
  jp inst

inst_after:
  ; Save registers at end
  ld [result_sp], sp
  ld sp, result_sp
  push hl
  push de
  push bc
  push af
  ldh a, [rIF]
  ldh [result_if], a
  ldh a, [rIE]
  ldh [result_ie], a
  xor a
  ldh [rIF], a
  inc a  ; vblank only!
  ldh [rIE], a

  ; Restore stack and return
  ld sp, sp_save
  pop hl
  ld sp, hl
  ei
  jp draw_result_regs

inst_epilog_src:
  nop
  nop
  jp inst_after

temp_exerciser:
  ret

; Instruction editor background drawing ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SECTION "draw_fields", ROM0, ALIGN[3]
runtypenames:
  db "OFF     "
  db "PRESS A "
  db "AUTO    "

inst_labels:
  dwxy 1, 1
  db "INST", $FF
  dwxy 1, 2
  db "RUN:", $FF
  dwxy 3, 4
  db "AF", $FF
  dwxy 3, 5
  db "BC", $FF
  dwxy 3, 6
  db "DE", $FF
  dwxy 3, 7
  db "HL", $FF
  dwxy 3, 8
  db "SP", $FF
  dwxy 1, 9
  db "IEIF", $FF
  dwxy 2, 10
  db "LAST INT", $FF
  dwxy 1, 15
  db "A DIR:CHANGE DIGIT",$FF
  dwxy 1, 16
  db "SEL:CPU INST", $FF
  db $00

draw_inst:
  lb bc, inst_length, low(inst)
  ldxy de, 6, 1
hexdump_b_bytes_hram_c::
  .loop:
    call draw_2dig_c
    dec b
    jr nz, .loop
  ret

draw_runtype:
  ldh a, [runtype]
  add a
  add a
  add a
  add low(runtypenames)
  ld l, a
  adc high(runtypenames)
  sub l
  ld h, a
  ldxy de, 6, 2
  .loop:
    ld a, [hl+]
    ld b, a
    ld a, [hl+]
    ld c, a
    call hblank_put_bc
    ld a, l
    and $07
    jr nz, .loop
  ret

draw_result_regs:
  ; Draw flags ZNHC
  ldh a, [result_af+0]
  ldxy de, 15, 4
  lb bc, "Z", "N"
  call draw_2flags
  lb bc, "H", "C"
  call draw_2flags
  
  ld c, low(last_int)
  ldxy de, 11, 10
  call draw_2dig_c  ; Draw last_int

  ; Draw register values
  ld c, low(result_regs)
  ldxy de, 11, 4
  jr draw_regvalues

draw_input_regs:
  ld c, low(input_regs)
  ldxy de, 6, 4
  ; fall through
;;
; @param C values source
; @param DE tilemap position of input AF or output AF
draw_regvalues:
  ld b, (result_regs-input_regs)/2
  .regloop:
    inc c
    call draw_2dig_c
    dec c
    dec c
    call draw_2dig_c
    inc c
    ld a, 28
    add e
    ld e, a
    adc d
    sub e
    ld d, a
    dec b
    jr nz, .regloop
  ret

draw_2flags:
  add a
  jr c, .clear_b
    ld b, " "
  .clear_b:
  add a
  jr c, .clear_c
    ld c, " "
  .clear_c:
  push af
  call hblank_put_bc
  pop af
  ret

; Drawing editor sprite ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

draw_cursor:
  ld hl, oam_used
  ld l, [hl]

  ldh a, [cursor_y]
  cp 2
  ccf    ; CF=1 if >= 2 else 0
  adc 3  ; 3, 4, 6, 7, 8, 9, 10, 11
  add a  ; taking into account 8 visible and 16 invisible margin
  add a
  add a
  ld [hl+], a

  ldh a, [cursor_y]
  cp 1
  ldh a, [cursor_x]
  jr nz, .not_line_1
    xor a
  .not_line_1:
  add 6
  add a
  add a
  add a
  ld [hl+], a

  ld a, 39
  ld [hl+], a
  xor a
  ld [hl+], a

  ld a, l
  ld [oam_used], a
  ret

; Moving cursor ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SECTION "handle_input", ROM0, ALIGN[3]

;;
; @param B buttons pressed this frame
; @param C height
move_up_down_limit_c::
  ldh a, [cursor_y]
  bit PADB_UP, b
  jr z, .not_move_up
    dec a
  .not_move_up:
  bit PADB_DOWN, b
  jr z, .not_move_down
    inc a
  .not_move_down:
  cp c
  ret nc
  ldh [cursor_y], a
  ret

;;
; Clamps at right side even if nothing pressed
; @param B buttons pressed this frame
; @param C width
; @return BCDEHL unchanged
move_left_right_limit_c::
  ; Left and Right on row 0 or row 2-6 move X in range [0, C)
  ldh a, [cursor_x]
  bit PADB_LEFT, b
  jr z, .not_move_left
    dec a
  .not_move_left:
  bit PADB_RIGHT, b
  jr z, .not_move_right
    inc a
  .not_move_right:
  cp $80  ; If negative, don't move
  ret nc
  cp c  ; If positive, clamp to maximum value even if unchanged
  jr c, .no_cursor_x_clamp  ; in case up or down was pressed
    ld a, c
    dec a
  .no_cursor_x_clamp:
  ldh [cursor_x], a
  ret

;;
; If A was pressed this frame, make a_pressed_by_self nonzero
; @param B buttons pressed this frame
set_a_if_pressed::
  bit PADB_A, b
  ret z
  ld a, b
  ldh [a_pressed_by_self], a
  ret

;;
; If A was pressed, swallow the press
; @return Z true if A wasn't pressed
is_a_release::
  ldh a, [a_pressed_by_self]
  or a
  ret z
  ld a, 0  ; preserve Z flag
  ldh [a_pressed_by_self], a
  ret

;;
; Increases a nibble if Up is pressed or decreases it if Down is
; pressed.
; @param A offset in nibbles from start of array at C
; @param B buttons pressed this frame
; @param C offset of array from $FF00
; @return BHL: unchanged; Z: set if neither Up nor Down was pressed;
; C: pointer to changed byte; E: which nibble was to be changed
change_nibble_a_of_c::
  ; Find byte A/2 of this value
  ld e, a  ; E bit 0 clear for high nibble, set for low
  srl a
  add c
  ld c, a  ; C points at byte to edit

  ; Find add mask
  rr e   ; C = 1 if low nibble else 0
  sbc a  ; A = $FF if low nibble half else $00
  xor $F0
  ld e, a  ; E = what to add for down; E & $11: what to add for up

  ; Find add amount
  ld d, $FF
  bit PADB_DOWN, b
  jr nz, .add_d_to_nibble_e
  ld d, $11
  bit PADB_UP, b
  ret z
  ; If Up or down is pressed, modify the nibble
  .add_d_to_nibble_e:
    ld a, d
    and e
    ld d, a  ; D: amount to add

    ld a, [$FF00+c]
    ld b, a
    add d
    xor b
    and e
    xor b
    ld [$FF00+c], a
  scf
  adc a
  ret

handle_input:
  ld b, PADF_UP|PADF_DOWN|PADF_LEFT|PADF_RIGHT
  call autorepeat

  ldh a, [new_keys]
  ld b, a
  call set_a_if_pressed

  ; If A is currently down, change this digit
  ldh a, [cur_keys]
  bit PADB_A, a
  jr z, .not_a_held
    ld a, PADF_UP|PADF_DOWN|PADF_LEFT|PADF_RIGHT
    and b
    ret z  ; Return if nothing pressed on Control Pad

    xor a  ; A was not pressed by self
    ldh [a_pressed_by_self], a

    ; Don't change any digit if on runtype line
    ldh a, [cursor_y]
    cp 1
    jr z, .y_is_1

    ; Begin calculating address of digit to change
    jr c, .changing_inst_digit
      ; Change a reg digit
      add a
      add low(input_regs) - 4
      ld c, a
      ld a, [cursor_x]
      xor 2  ; these rows are little endian
      jr .change_digit_a_of_c
    .changing_inst_digit:
      ld c, low(inst)
      ld a, [cursor_x]
    .change_digit_a_of_c:
    
    call change_nibble_a_of_c
    jr z, .not_up_down  ; No Up/Down press? Try Left/Right
    call draw_inst
    call draw_input_regs

    ; In auto runtype, re-run after every digit change
    ldh a, [runtype]
    cp RUNTYPE_AUTO
    jr nz, .not_a_held
      call run_inst
      call draw_result_regs
  .not_a_held:

  ; If A was released in the right runtype, run the code
  call is_a_release
  jr z, .not_release_a_rerun
  ldh a, [runtype]
  cp RUNTYPE_PRESS_A
  jr nz, .not_release_a_rerun
    call run_inst
    call draw_result_regs
  .not_release_a_rerun:

  ld c, NUM_ABOVE_REGPAIRS + NUM_REGPAIRS
  call move_up_down_limit_c
  .not_up_down:

  ; Calculate width of this row
  ldh a, [cursor_y]
  ld c, 12  ; width
  cp 1
  jr c, .move_x_in_row_width_c  ; row 0: inst
  ld c, 4
  jr nz, .move_x_in_row_width_c  ; row 2-6: 16-bit regs
  .y_is_1:

    ; Left and Right on row 1 change the runtype, with wrapping
    ldh a, [runtype]
    ld c, a  ; C: old runtype
    bit PADB_LEFT, b
    jr z, .not_prev_runtype
      add NUM_RUNTYPES - 1  ; Intentionally wrap to cycle backward
    .not_prev_runtype:
    bit PADB_RIGHT, b
    jr z, .not_next_runtype
      add 1
    .not_next_runtype:
    cp NUM_RUNTYPES
    jr c, .no_runtype_wrap
      sub NUM_RUNTYPES  ; Wrap around
    .no_runtype_wrap:
    ldh [runtype], a
    cp c
    call nz, draw_runtype  ; Redraw if changed
    ret

  .move_x_in_row_width_c:
  jp move_left_right_limit_c

; Shared background drawing ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SECTION "shared_bg", ROM0

cls_draw_labels::
  push hl
  ld h, 36
  call clear_scrn0_to_h
  pop hl
draw_labels::
  ld a, [hl+]
  or a
  ret z
  ld e, a
  ld a, [hl+]
  ld d, a
  .charloop:
    ld a, [hl+]
    cp $FF
    jr z, draw_labels
    ld [de], a
    inc e
    jr .charloop

;;
; Waits for mode 1, draws 2 digits at [$FF00+C] to [DE]
; @return C increased by 1; DE increased by 2
draw_2dig_c::
  push bc
  ld a, [$FF00+c]
  and $F0
  swap a
  ld b, a
  ld a, [$FF00+c]
  and $0F
  ld c, a
  call hblank_put_bc
  pop bc
  inc c
  ret

;;
; Waits for mode 0 or 1, then writes nibbles of A to [DE]
; @return DE incremented by 1, B high nibble, C low nibble
hblank_put_a::
  ld c, a
  swap a
  and $0F
  ld b, a
  ld a, c
  and $0F
  ld c, a
  ; fallthrough

;;
; Waits for mode 0 or 1, then writes characters B and C to [DE]
; BCHL unchanged
hblank_put_bc::
  ldh a, [rSTAT]
  bit 1, a
  jr nz, hblank_put_bc
  ld a, b
  ld [de], a
  inc e
  ld a, c
  ld [de], a
  inc e
  ret

font_1b: incbin "obj/gb/Crash_dump_uncial.1b"

