include "src/hardware.inc"
include "src/global.inc"

; Continue is a conventional test framework to run all tests one by
; one.  It's called "Continue" because in the game's gimmick, it
; represents having collected all coins in stages with 10 of 10
; passes.

COINS_PER_STAGE equ 10
NUM_STAGES equ 2

section "passbits", WRAM0, ALIGN[2]
passbits:: ds NUM_STAGES*2

section "continue_state", WRAM0
cur_stage: ds 1
cursor_y: ds 1
wnd_progress: ds 1
wnd_y: ds 1
cur_coin_desc: ds 1
wanted_coin_desc: ds 1
want_coin_out: ds 1

; Running several tests one after another ;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "continue_run_tests", ROM0

run_tests_in_stage_a::
  ld b, a

  ; DE: pointer into passbits
  add a
  add low(passbits+1)
  ld e, a
  adc high(passbits+1)
  sub e
  ld d, a

  ; Ring counter for completed tests
  ; When this doubles COINS_PER_STAGE times, carry becomes set
  ; and this stage is complete.
  xor a
  ld [de], a
  dec de
  ld a, $10000 >> COINS_PER_STAGE
  ld [de], a

  ; HL: pointer into coin_list
  ld a, b
  call get_coin_list_stage_a

  .coinloop:
    ; Save state, run a test, and restore state
    push de
    push hl
    call run_test_hl
    pop hl
    inc hl
    inc hl
    pop de

    ; Record test result (0: pass; 1: fail)
    ld a, [de]
    adc a
    ld [de], a
    inc de
    ld a, [de]
    adc a
    ld [de], a
    dec de
    jr nc, .coinloop
  ret

;;
; Set up the test environment, then run the test whose function
; pointer is at [hl].
run_test_hl:
  ld a, [hl+]
  ld h, [hl]
  ld l, a
  push hl
  ; Now HL is free to set up the test environment, and ret will
  ; start the test.  Test environment shall be specified later.

  ret  ; The test begins

;;
; @param A stage (0-9)
; @return HL pointer to the coin routine
get_coin_list_stage_a:
  ld l, a
  add a
  add a
  add l
  add a
  add a  ; 20 bytes of coin pointers per stage
  add low(coin_list)
  ld l, a
  adc high(coin_list)
  sub l
  ld h, a
  ret

; Displaying test results ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; VRAM map
; Bank 0
; 00-2F Logo
; Bank 1
; 80-BF Description of current coin Unknown
; C0-CB 0-9 left aligned, current stage, current stage + 1
; CC-CF Coin, blank, left, right
; E0-FF Titles of coins 1-2
; Bank 2
; 00-7F Titles of coins 3-10
;
; Below coin 2, a STAT IRQ switches the background from banks
; 0 and 1 to banks 2 and 1.

section "continue_menu", ROM0

show_stages::
  ; Clear pixels in VWF canvas
  ld de, CHRRAM1
  ld h, e
  ld bc, $1000
  call memset
  ; Clear tilemaps as well
  ld h, BLANK_TILE
  ld b, 5
  call memset

  ld hl, CHRRAM0
  call load_logo

  ; Load checkmark and related tiles
  ld de, checkmark_chr
  ld hl, CHRRAM0 + TEST_OK_TILE * $10
  ld b, 10
  call pb16_unpack_block

  ; Draw "Stage" label and header bar indicators
  ld hl, continue_labels
  ld de, $800+LABELS_TILE
  call vwfDrawLabels
  ldxy hl, 5, 6
  ld a, LEFT_ARROW_TILE
  ld [hl+], a
  ld a, STAGE_PLUS_1_TILE
  ld [hl+], a
  ld [hl], RIGHT_ARROW_TILE

  ; Draw digits in their place
  lb bc, 9, DIGITS_BAR_TILE+1
  ldxy hl, 1, COINNAMES_Y
  ld de, 31
  .digitsloop:
    ld a, STAGE_PLUS_0_TILE
    ld [hl+], a
    ld [hl], c
    inc c
    add hl, de
    dec b
    jr nz, .digitsloop
  ld a, STAGE_PLUS_1_TILE
  ld [hl+], a
  ld [hl], DIGITS_BAR_TILE

  ; Draw area for coin names
  ldxy hl, 4, 7
  ld a, COINNAMES_TILE
  ld b, COINS_PER_STAGE
  call vwfcanvas128

  ; Draw frame of coin description
  ldxy hl, 1, 0, _SCRN1
  ld [hl], TLCORNER_TILE
  ld a, TRCORNER_TILE
  call wr17a15
  ld b, 4
  dec a  ; ld a, VBAR_TILE
  .wndsides_loop:
    ld [hl], a
    call wr17a15
    dec b
    jr nz, .wndsides_loop
  ld a, BLCORNER_TILE
  ld [hl+], a
  inc a
  ld c, 16
  call memset_tiny
  inc a
  ld [hl+], a

  ; And fill the description area with VWF canvas
  ldxy hl, 2, 1, _SCRN1
  ld a, DESCRIPTION_TILE
  ld b, 4
  call vwfcanvas128

  ; Now everything that doesn't depend on the stage number is in,
  ; so turn on display
  ld a,IEF_VBLANK|IEF_LCDC
  ldh [rIE],a  ; enable IRQs
  ld a, STATF_LYC
  ldh [rSTAT], a
  ld a, %01101100  ; white, black, dark gray, light gray
  ld [rBGP], a
  ld a, 7
  ld [rWX], a
  ld a, LCDCF_ON|LCDCF_BGON|LCDCF_WINON|LCDCF_OBJON|LCDCF_BG8800|LCDCF_BG9800|LCDCF_WIN9C00
  ldh [stat_lcdc_value], a
  ldh [rWY], a  ; Keep window out of the way until it's time
  ld a, 8*COINNAMES_Y
  ldh [rLYC], a
  ld a, LCDCF_ON|LCDCF_BGON|LCDCF_WINON|LCDCF_OBJON|LCDCF_BG8000|LCDCF_BG9800|LCDCF_WIN9C00
  ldh [vblank_lcdc_value], a
  ldh [rLCDC], a
  ei

  xor a
  ld [wnd_progress], a
  ld [cursor_y], a
  ld [want_coin_out], a
.set_stage_to_a:
  ld [cur_stage], a
  push af
  rst wait_vblank_irq
  ld a, BLANK_TILE
  ldxy hl, 2, 0, _SCRN1  ; Hide coin title bar during screen transition
  ld c, 15
  rst memset_tiny
  ld a, $FF
  ld [cur_coin_desc], a
  ld c, a
  call draw_checkmarks_ca  ; Hide checkmarks during screen transition
  pop af
  push af
  call load_digits_bar_stage_a
  pop af
  push af
  call draw_coin_names_stage_a
  pop af
  call draw_checkmarks_stage_a  ; Now draw actual results

.waitloop:
  call read_pad
  ld b, PADF_UP|PADF_DOWN
  call autorepeat
  ldh a, [new_keys]
  ld b, a

  ld hl, cur_stage
  ld a, [hl]
  bit PADB_LEFT, b
  jr z, .not_left
    dec a
  .not_left:
  bit PADB_RIGHT, b
  jr z, .not_right
    inc a
  .not_right:
  cp NUM_STAGES
  jr nc, .stage_unchanged
    cp [hl]
    jr nz, .set_stage_to_a
  .stage_unchanged:

  ld hl, cursor_y
  ld a, [hl]
  bit PADB_UP, b
  jr z, .not_up
    dec a
  .not_up:
  bit PADB_DOWN, b
  jr z, .not_down
    inc a
  .not_down:
  cp COINS_PER_STAGE
  jr nc, .y_unchanged
  cp [hl]
  jr z, .y_unchanged
    ld [hl], a
  .y_unchanged:

  ld hl, want_coin_out
  bit PADB_A, b
  jr z, .not_A
    ld [hl], b
  .not_A:
  bit PADB_B, b
  jr z, .not_B
    ld [hl], 0
  .not_B:

  ld hl, SOAM
  ld a, [cursor_y]
  add COINNAMES_Y+2
  add a
  add a
  add a
  ld [hl+], a
  ld a, 4+8  ; arrow X
  ld [hl+], a
  ld a, RIGHT_ARROW_TILE
  ld [hl+], a
  xor a
  ld [hl+], a
  ld a, l
  ld [oam_used], a
  call lcd_clear_oam 

  call move_coin_desc_window
  call draw_coin_desc_if_needed

  rst wait_vblank_irq
  call run_dma
  ld a, [wnd_y]
  ldh [rWY], a
  ldh a, [new_keys]
  and PADF_START
  jr z, .waitloop

  call lcd_off
forever:
  halt
  jr forever

DESCRIPTION_TILE = $80
DIGITS_BAR_TILE = $C0
STAGE_PLUS_0_TILE = $CA
STAGE_PLUS_1_TILE = $CB
TEST_OK_TILE = $CC
BLANK_TILE = $CD
LEFT_ARROW_TILE = $CE
RIGHT_ARROW_TILE = $CF
TLCORNER_TILE = $D0
VBAR_TILE = $D1
TRCORNER_TILE = $D2
BLCORNER_TILE = $D3
HBAR_TILE = $D4
BRCORNER_TILE = $D5
LABELS_TILE = $D6
COINNAMES_TILE = $E0
COINNAMES_Y = 7

load_digits_bar_stage_a:
  push af
  call vwfClearBuf
  lb bc, 10, 0
  .digitloop:
    push bc
    ld a, c
    add a
    add a
    scf  ; X=8*B+1
    adc a
    ld b, a
    ld a, $30
    add c
    call vwfPutTile
    pop bc
    inc c
    dec b
    jr nz, .digitloop
  pop af  ; A = stage number (0 based)

  ; Draw zero-based stage number
  or a
  jr z, .no_leading_zero
    push af
    add $30
    ld b, 8*10+4
    call vwfPutTile
    pop af
  .no_leading_zero:

  ; Draw one-based stage number
  cp 9
  jr c, .less_than_ten
    ld a, "1"
    ld b, 8*11-1
    call vwfPutTile
    ld a, $FF
  .less_than_ten:
  add $31
  ld b, 8*11+4
  call vwfPutTile

  ld c, 12
  ld hl, CHRRAM0 + DIGITS_BAR_TILE * 16
  jp vwfPutBufHBlank

draw_coin_names_stage_a:
  call get_coin_list_stage_a
  ld de, $8E00
  .loop:

    ; Clear the line buffer and fetch the coin's name, and draw it
    push hl
    call vwfClearBuf  ; DE preserved
    pop hl  ; HL is an iterator into coin pointers
    push hl
    push de
    ; Stack map: Destination VRAM address, coin pointer iterator
    ld a, [hl+]  ; Grab a coin pointer
    ld h, [hl]
    ld l, a  ; HL points to a coin's test routine
    inc hl
    inc hl   ; HL points to a coin's name
    ld b, 2
    call vwfPuts

    ; Push the line buffer to CHR RAM.
    pop hl
    push hl
    ld c, 16
    call vwfPutBufHBlank

    pop de
    pop hl
    inc hl  ; Advance the iterator
    inc hl
    inc d
    ld a, d
    cp $8E+10
    jr c, .loop
  ret

draw_checkmarks_stage_a:
  add a
  add low(passbits)
  ld l, a
  add high(passbits)
  sub l
  ld h, a
  ld a, [hl+]  ; A: low bits
  ld c, [hl]  ; C: high bits
  ; fall through
draw_checkmarks_ca:
  ld de, 32    ; line pitch
  ld b, COINS_PER_STAGE
  ldxy hl, 3, 7
  .loop:
    bit 1, c
    push af
    .vwait:
      ld a, [rSTAT]
      and STATF_BUSY
      jr nz, .vwait
    ld [hl], TEST_OK_TILE
    pop af
    jr z, .test_passed  ; 0 means "nothing" wrong with the behavior
      ld [hl], BLANK_TILE
    .test_passed:

    ; Move to the next test
    add a, a
    rl c
    add hl, de
    dec b
    jr nz, .loop
  ret

; Showing the description of a test ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;

move_coin_desc_window:
  ld hl, cur_stage
  ld a, [hl]
  add a  ; set wanted coin to A*10+cursor_y
  add a
  add [hl]
  add a
  inc hl  ; ld hl, cursor_y
  add [hl]
  ld hl, wanted_coin_desc
  ld [hl], a

  ; If the current and wanted coin descriptions differ, or if the
  ; user requested retracting, retract.
  ld a, [want_coin_out]
  ld c, a
  ld a, [cur_coin_desc]
  xor [hl]  ; A = zero if on wanted coin
  cp 1
  sbc a  ; A=$FF to extend or $00 to retract
  and c
  ld c, a  ; C nonzero to extend
  ld hl, wnd_progress
  jr nz, .retraction_not_requested

  ; There are two places to start retraction: once the animation
  ; gets to the peak of overshoot or reaches its end.
    ld a, [hl]
    cp 128
    jr nc, .retraction_not_requested  ; Retraction already in progress
    cp wnd_y_sequence_peak-wnd_y_sequence
    jr nz, .retract_not_peak
      ld [hl], 256-(wnd_y_sequence_peak-wnd_y_sequence)
      jr .retraction_not_requested
    .retract_not_peak:
    cp wnd_y_sequence_last-wnd_y_sequence
    jr nz, .retraction_not_requested
    ld [hl], 256-(wnd_y_sequence_last-wnd_y_sequence)
  .retraction_not_requested:

  ; If all the way offscreen and user requested retract, stop.
  ld a, [hl]
  or c
  jr z, .dont_advance

  ld a, [hl]
  sub 128
  cp 128+wnd_y_sequence_last-wnd_y_sequence
  jr c, .advance
    ld a, WYBASE
    jr .have_wy
  .advance:
    inc [hl]
  .dont_advance:

  ; Absolute value approximation
  ld a, [hl]
  add a  ; C set if negative
  sbc a  ; A=$FF if negative
  xor [hl]

  ; Look up distance for this time
  add low(wnd_y_sequence)
  ld l, a
  adc high(wnd_y_sequence)
  sub l
  ld h, a
  ld a, [hl]
.have_wy:
  ld [wnd_y], a
  ret

draw_coin_desc_if_needed:
  ld a, [want_coin_out]
  or a
  ret z  ; Don't draw if drawer is closed
  ld a, [wnd_progress]
  or a
  ret nz  ; Don't draw if drawer is still retracting
  ld a, [wanted_coin_desc]
  ld hl, cur_coin_desc
  cp [hl]
  ret z  ; Don't draw if already loaded
  ; Otherwise fall through

;;
; Draws the description for the selected coin
draw_coin_desc:
  ld a, [wanted_coin_desc]
  ld [cur_coin_desc], a
  add a
  add low(coin_list)
  ld l, a
  adc high(coin_list)
  sub l
  ld h, a  ; HL points to an entry in coin_list
  ld a, [hl+]
  ld h, [hl]
  ld l, a  ; HL points to a coin's starting point
  inc hl
  inc hl   ; HL points to a coin's name
  ; Description separated from name by a character $01-$0F,
  ; canonically $0A (UNIX newline).  If $00 appears instead,
  ; there is no description.
  .finddescloop:
    ld a, [hl]
    or a
    jr z, .founddesc
    inc hl
    cp 16
    jr nc, .finddescloop
  .founddesc:

  ld de, _VRAM + DESCRIPTION_TILE * 16  ; $8800 to $88BF
  ; At this point:
  ; DE is the destination in CHRRAM1 ($8800 to $88BF)
  ; HL is the text source

  .lineloop:
    push hl
    call vwfClearBuf
    pop hl
    push de
    ld b, 2
    call vwfPuts
    ld a, [hl]
    or a
    jr z, .desc_terminator
      inc hl  ; Treat \0 as infinitely long \n stream
    .desc_terminator:
    pop de
    push de
    push hl
    ld h, d
    ld l, e
    ld c, 16
    call vwfPutBufHBlank
    pop hl
    pop de
    inc d
    ld a, d
    cp high(_VRAM + (DESCRIPTION_TILE + 64) * 16)
    jr c, .lineloop

  ; Write the coin name at the top of the window
  rst wait_vblank_irq
  ld a, [cursor_y]
  swap a
  and $F0
  add COINNAMES_TILE
  ld c, 15
  ldxy hl, 2, 0, _SCRN1
  call memset_inc
  ld [hl], HBAR_TILE
  ret

WYBASE equ 96
wnd_y_sequence:
  db 144
  db WYBASE+40
  db WYBASE+28
  db WYBASE+18
  db WYBASE+10
  db WYBASE+4
  db WYBASE+0
  db WYBASE-2
  db WYBASE-3
  db WYBASE-4
wnd_y_sequence_peak:
  db WYBASE-4
  db WYBASE-3
  db WYBASE-1
wnd_y_sequence_last:
  db WYBASE+0

; Things small enough to fill alignment gaps
section "continue_little1", ROM0
continue_labels:
  db 8, 48
  db "Stage",$00

section "continue_little2", ROM0
;;
; Writes a 16-tile-wide strip of increasing tile IDs.
; @param A first tile ID
; @param HL top left corner of strip in tilemap
; @param B number of rows
vwfcanvas128:
  ld c, $10
  call memset_inc
  ld de, $10
  add hl, de
  dec b
  jr nz, vwfcanvas128
  ret

section "continue_little3", ROM0
;;
; Adds 17 to HL, writes the byte in A, adds 15 to HL. Used to draw frame.
wr17a15:
  ld de, 17
  add hl, de
  ld [hl-], a
  dec e
  add hl, de
  ret

section "continue_chr", ROM0

checkmark_chr: incbin "obj/gb/checkmark.2b.pb16"
