include "src/hardware.inc"
include "src/global.inc"

def vCoinTmp equ $9FFF

; Stage 4: Game Boy Color ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "STAGE4COINS", ROM0

def WAVE_RAM_RETRIGGER_AUDIBLE equ 0
def DEBUGHEX_WAVE_RAM_RETRIGGER equ 0

coin_wave_ram_retrigger::
  jr .start
  db "Retrigger corrupts wave",10
  db "Playing a wave note without",10
  db "turning DAC off and on can",10
  db "change byte 0 on B&W only",0
.start:
  call init_silent_apu
  call load_sawtooth_wave  ; first byte is $00; rest is nonzero

  ld b, 256-64
  .period_loop:

    ; Play a high-pitched tone
    ; (inspired by "10-wave trigger while on.gb" by blargg)
    ld hl, rNR30
    if WAVE_RAM_RETRIGGER_AUDIBLE
      ld a, $A0
    else
      ld a, $80
    endc
    ld [hl+], a  ; enable DAC
    ld [hl+], a  ; length counter
    ld [hl+], a  ; volume
    ld [hl], b   ; initial period
    ld a, $87
    ldh [rNR34], a  ; trigger + high period
    ld [hl], $100-2  ; second period

    ; Wait a bit and retrigger it
    ld c, 40
    .cdloop:
      dec c
      jr nz, .cdloop
    ldh [rNR34], a  ; retrigger

    xor a
    ldh [rNR30], a  ; disable DAC
    inc b
    jr nz, .period_loop

  ; At this point, the first byte should have been overwritten
  ; several times on DMG or not at all on GBC.  Set B bit 7 to true
  ; if we expect it to still be 0.
  ldh a, [hCapability]
  ld b, a  ; bit 7 = 1 to expect zero or 0 to expect nonzero
  ldh a, [_AUD3WAVERAM]
  if DEBUGHEX_WAVE_RAM_RETRIGGER
    ld [debughex+0], a
  endc
  cp 1   ; CF = 1 if 0 or 0 if nonzero
  rra    ; move to bit 7
  xor b  ; bit 7 = 0 if match or 1 if wrong
  adc a  ; move to CF
  ret

coin_dma_copy_speed::
  jr .start
  db "DMA block copy speed",10
  db "Copying 114 tiles to VRAM",10
  db "in vblank takes 8 lines",10
  db "(B&W: no-op)",0
.start:
  call lcd_on_blank
  ei
  rst wait_vblank_irq

  ld a, [hCapability]
  and $80
  swap a
  ld c, a  ; C: expected duration (DMG: 0; CGB: 8)

  ; Do the copy
  xor a
  ldh [rDMASRCLO], a
  ldh [rDMADSTLO], a
  ld a, $C0
  ldh [rDMASRCHI], a
  ld a, $88
  ldh [rDMADSTHI], a
  ld a, 114-1
  ld hl, rLY
  ld b, [hl]
  ldh [rDMASTART], a
  nop

  ; Compare the duration
  ld a, [hl]
  sub b   ; A: actual duration
  sub c   ; A: 0-1 if match
  add -2  ; CF: 0 if match
  jp lcd_off_and_return

def DEBUGHEX_STATBUG equ 0

; bit 4: 1 if mode 0 is clean (DMG: no)
; bit 3: 1 if mode 1 is clean (DMG: no)
; bit 2: 1 if mode 2 is clean (all: yes)
; bit 1: 1 if mode 3 is clean (all: yes)
; bit 0: 1 if mode 3 LYC is clean (DMG: no)
def STATBUG_EXPECT_DMG equ %00110
def STATBUG_EXPECT_CGB equ %11111

coin_stat_write_ff::
  jr .start
  db "STAT momentary enable",10
  db "Writing 0 to FF41 in hblank,",10
  db "vblank, or LY=LYC fires",10
  db "interrupt on B&W only",10
  db "'Road Rash? More like crash!'",0
.start:
  call lcd_on_blank
  xor a
  ld d, a
  ld e, a
  ldh [rSTAT], a
  ld a, IEF_STAT|IEF_VBLANK
  ldh [rIE], a
  ei

  call write_statbug_mode_E  ; mode 0 (hblank): somewhere
  inc e
  call write_statbug_mode_E  ; mode 1: near bottom of frame
  inc e

  ; calc84maniac understands SameBoy source as having only the first
  ; dot of mode 2 actually count as mode 2 for interrupt purposes.
  ; I model this as mode 2's STAT bug period being an extension of
  ; mode 0's STAT bug period that's too short to target.
  call write_statbug_mode_E  ; mode 2: near top of frame (no statbug)
  inc e
  call write_statbug_mode_E  ; mode 3: near top of frame (no statbug)
  ld hl, rLY
  ldh a, [rLYC]
  .lywait_lyc:
    cp [hl]
    jr nz, .lywait_lyc
  call write_statbug_mode_E  ; mode 3 on LY=LYC (statbug in SB not bgb)

  if DEBUGHEX_STATBUG
    ld a, d
    ld [debughex+1], a
  endc
  ldh a, [hCapability]
  add a
  sbc a  ; 00 for DMG, FF for CGB
  and STATBUG_EXPECT_CGB^STATBUG_EXPECT_DMG
  xor STATBUG_EXPECT_DMG
  xor d  ; 00 for match, nonzero for fail
  add -1
  jp lcd_off_and_return

;;
; Waits for a mode in STAT and then writes a value.
; To write a value and it's ones' complement, use write_D_notD_mode_E
; @param E mode to wait for
; @param HL address to write
; @return D shifted left by 1 with bit 0 from stack red zone
write_statbug_mode_E:
  lb bc, STATF_LCD, low(rSTAT)
  ld hl, sp-1
  .wait0loop:
    ld a, [$FF00+c]
    xor e
    and b
    jr z, .wait0loop
  .wait1loop:
    ld a, [$FF00+c]
    xor e
    and b
    jr nz, .wait1loop
  ld [hl], h  ; initialize red zone
  ldh [c], a  ; trigger a STAT bug
  ld a, [hl]  ; read whether IRQ happened
  add a
  rl d
  ret

coin_ram_capacity::
  jr .start
  db "RAM capacity",10
  db "GBC: 32K WRAM 16K VRAM",10
  db "(FF70=0 is 1); B&W: 8K+8K",10
  db "'HEY TOUGH GUY! THINK YOU",10
  db "CAN SPOOF ME THAT WAY?'",0
.start:

  call lcd_off
  ldh a, [hCapability]
  and $80
  rlca
  ld d, a  ; D is $01 for GBC/GBA or $00 for DMG/SGB

  ; Fill sentinel bytes of RAM with bank number
  xor a
  .fill_banks:
    ldh [rSVBK], a
    ld [wxCoinTmp], a  ; write 00 FF FE FD ... 02 01 to WRAMX
    dec a
    ldh [rSVBK], a
    ldh [rVBK], a
    ld [wCoinTmp], a   ; write FF FE FD FC ... 01 00 to WRAM0
    ld [vCoinTmp], a   ; write FF FE FD FC ... 01 00 to VRAM
    jr nz, .fill_banks

  ; Test that each byte has the expected value
  .test_banks:
    ldh [rSVBK], a
    ldh [rVBK], a
    ld b, a  ; B: current bank number

    ; VRAM bank should be current_bank & is_GBC
    and d
    ld hl, vCoinTmp
    xor [hl]  ; Should be 0
    ; WRAM0 bank should always be 0
    ld hl, wCoinTmp
    or [hl]  ; Should be 0
    jr nz, .fail

    ; WRAMX bank should be 1 if is_GBC == 0 or (bank & $07) == 0
    ; or bank & $07 otherwise
    or d
    jr z, .force_bank_1
      ld a, b
      and $07
      jr nz, .have_expected_wramx_bank
    .force_bank_1:
      inc a
    .have_expected_wramx_bank:
    ld hl, wxCoinTmp
    xor [hl]  ; Should be 0
    jr nz, .fail

    ld a, b
    dec a
    jr nz, .test_banks

  jr .pass
.fail:
  xor a
  scf
.pass:
  ldh [rSVBK], a
  ldh [rVBK], a
  ret

def DEBUGHEX_GBC_ORMASK equ 0

coin_gbc_or_mask::
  jr .start
  db "OR mask for GBC registers",10
  db "Unused bits of SVBK, VBK,",10
  db "KEY1, SC, BCPS, OCPS, RP ",10
  db "read as 1; more are unused",10
  db "on B&W",0
.start:
  ; Registers with GBC-specific functionality that may include an
  ; OR-maskable read not tested elsewhere
  ; rSC (FF02), rKEY1 (FF4D), rVBK (FF4F), rHDMA* (FF51-FF54),
  ; rRP (FF56), rBCPS (FF58), rOCPS (FF5A), rSVBK (FF70)
  ;
  ; rHDMA5 is supposedly readable, but it only matters during
  ; an ongoing HDMA, and HDMA is for a later stage
  ;
  ; Caution for RP (infrared):
  ; SameBoy src says CGB E has 0 in bit 4, while others have 1
  ldh a, [hCapability]
  ld e, a
  ld hl, gbc_regs_exact
  .regloop:
    ld a, [hl+]  ; Read register address
    if DEBUGHEX_GBC_ORMASK
      ld [debughex+0], a
    endc
    ld c, a
    ld a, [hl+]  ; Read value to write
    ldh [c], a
    ld a, [hl+]  ; Read GBC value
    ld b, a
    ld a, [hl+]  ; Read DMG value
    bit 7, e
    jr nz, .use_gbc_value
      ld b, a
    .use_gbc_value:
    ldh a, [c]
    if DEBUGHEX_GBC_ORMASK
      ld [debughex+1], a
    endc
    xor b
    jr nz, .fail_a_nonzero
    ld a, l
    xor low(gbc_regs_exact_end)
    jr nz, .regloop

  ; xor a
  ldh [rRP], a
  if DEBUGHEX_GBC_ORMASK
    ld a, low(rRP)
    ld [debughex+0], a
  endc
  ldh a, [rRP]
  if DEBUGHEX_GBC_ORMASK
    ld [debughex+1], a
  endc
  cp $FF    ; calculate DMG result
  bit 7, e
  ret z     ; and use it if on DMG
  ; Otherwise we're on GBC.  Disregard bit 4 because CGB E clears it.
  or %00010000
  xor $3E
.fail_a_nonzero:
  add -1
  ret
.fail:
  scf
  ret

; gbc_regs_with_ormask
; 1. Write wrvalue to register
; 2. Read appropriate target value (DMG or GBC)
; 3. Read rdvalue from reg
; 4. If rdvalue != target, fail
gbc_regs_exact:
  ; register      wrvalue    gbcvalue   dmgvalue
  db low(rSVBK),  %00000000, %11111000, %11111111  ; F8 and F9 are distinct
  db low(rVBK),   %00000000, %11111110, %11111111
  db low(rKEY1),  %00000000, %01111110, %11111111
  db low(rSC),    %00000000, %01111100, %01111110
  db low(rBCPS),  %00000000, %01000000, %11111111
  db low(rOCPS),  %00000000, %01000000, %11111111
gbc_regs_exact_end:
; SVBK values F8 and F9 are distinct despite that they both map WRAM
; bank 1 into $D000.  If you write 00 and get back F9, the unlicensed
; game Jin Yong Qun Xia Zhuan has no sound.  F8 works as expected.
; https://github.com/mgba-emu/mgba/issues/2921
;
; rRP is handled separately because bit 4 is insignificant,
; differing on CGB E vs. all other CGB revisions.

def DEBUGHEX_GBC_MODE_3_LENGTH equ 0

coin_gbc_mode_3_length::
  jr .start
  db "Spriteless mode 3 length",10
  db "Disabling objects in LCDC",10
  db "shortens mode 3 on B&W only",0
.start:
  call lcd_on_blank
  ei

  ; DMG treats LCDCF_OBJON false as all sprites out of range,
  ; leading to a short mode 3.
  ; GBC treats LCDCF_OBJON false as all transparent, leading to
  ; mode 3 as long as it was if LCDCF_OBJON were true.
  ld a, LCDCF_ON|LCDCF_BGON  ; no sprites!
  ldh [stat_lcdc_value], a
  ldh [vblank_lcdc_value], a
  lb bc, 10, 8
  call mode_3_test_with_full_load
  if DEBUGHEX_GBC_MODE_3_LENGTH
    ld [debughex+0], a
  endc
  add -50  ; CF = 0 for short mode 3, 1 for long mode 3
  rr b     ; bit 7 = 0 for short mode 3, 1 for long mode 3
  ld a, [hCapability]  ; bit 7 = 0 to expect short, 1 to expect long
  xor b    ; bit 7 = 0 for match, 1 for mismatch
  adc a    ; move to CF
  jp lcd_off_and_return

def DEBUGHEX_OAM_DMA_ROM_BLOCKING equ 0

coin_oam_dma_rom_blocking::
  jr .start
  db "OAM DMA ROM blocking",10
  db "During OAM DMA from WRAM,",10
  db "ROM is readable on GBC;",10
  db "B&W reads what the DMA",10
  db "unit is reading",0
.start:
  call lcd_clear_all_oam

  ; run_dma has been modified to read [HL] during DMA
  ld hl, .start
  call run_dma
  ld c, a
  if DEBUGHEX_OAM_DMA_ROM_BLOCKING
    ld [debughex+0], a
  endc
  ; GBC puts ROM and WRAM on separate buses.  DMG puts them on the
  ; same bus, and reads from ROM return whatever shadow OAM value
  ; the DMA unit is reading at the time.  So on GBC, it will have
  ; read the ROM value, and on DMG, it will have read $00 (the
  ; value written by lcd_clear_all_oam).
  ldh a, [hCapability]
  and $80  ; $80: GBC; $00: DMG
  jr z, .notGBC
    ld a, [hl]  ; reread the byte
  .notGBC:
  xor c
  add $FF
  ret

def APU_ON_CLEARS_LENGTH_AUDIBLE equ 0

coin_apu_on_clears_length::
  jr .start
  db "APU on clears length",10
  db "Length counter can be set",10
  db "with APU off on B&W only",0
.start:

  ; Turn off APU, write length, turn on APU
  xor a
  ldh [rNR11], a
  ld hl, rNR52
  ld [hl], a
  ld a, $BE
  ldh [rNR11], a
  ld a, $88
  ld [hl-], a
  if APU_ON_CLEARS_LENGTH_AUDIBLE
    cpl
  else
    xor a
  endc
  ld [hl-], a
  ld [hl-], a

  ; Play a note with this length
  ld hl, rNR12
  ld a, $B7
  ld [hl+], a
  ld [hl+], a
  ld a, $C7
  ld [hl], a

  ; Verify in NR52 that the note played
  ldh a, [rNR52]
  rra
  ccf
  ret c

  ; Wait enough cycles for it to end on DMG
  ld bc, -6000
  .waitloop:
    inc c
    jr nz, .waitloop
    inc b
    jr nz, .waitloop

  ; should have stopped on DMG and still be playing on GBC
  ldh a, [hCapability]
  ld b, a  ; B bit 7: on GBC
  ldh a, [rNR52]
  rrca     ; A bit 7: still playing
  xor b
  add a
  ret

; the CRAM test took a surprisingly large fraction of the ROM
; a lot of emulators failed

coin_gbc_palette_readback::
  jr .start
  db "CRAM readable",10
  db "Write and read palette in",10
  db "vblank, increment on write if",10
  db "address>=$80, wrap $BF-$80",10
  db "(B&W: read $FF)",0
.start:
  call lcd_on_blank
  ei
  rst wait_vblank_irq

  ; Fill palette. This takes about 800 cycles
  lb bc, -64, low(rBCPS)
  ld hl, rOCPS
  ld a, $80
  ldh [c], a
  ld [hl], b  ; exploit us some mirroring
  inc c  ; C = low(rBCPD)
  inc l  ; L = low(rOCPD)
  .fill1_loop:
    ldh [c], a
    add 19
    ld [hl], a
    add 19
    inc b
    jr nz, .fill1_loop

  ; That leaves about 300 cycles to check that the first written
  ; byte can be read back after wraparound and that reading does not
  ; auto-increment.  On DMG, all reads should return $FF.
  ldh a, [c]  ; read first rBCPD
  ld d, a
  ldh a, [c]  ; read second rBCPD
  cp d
  jr nz, .fail1
  cp $FF
  rl b
  xor $80
  cp 1
  rl b

  ld a, [hl]  ; read first rOCPD
  cp [hl]     ; read second rOCPD
  jr nz, .fail1
  cp $FF
  rl b
  xor $80 + 19
  cp 1
  rl b

  ; Results are in bits of B
  ; bit 3: BCPD was not FF; bit 2: BCPD was correct
  ; bit 1: OCPD was not FF; bit 0: OCPD was correct
  ; We want 00 for DMG or 0F for GBC.
  ldh a, [hCapability]
  add a
  sbc a  ; FF for GBC
  and $0F
  xor b
  jr z, .nofail1
  .fail1:
    scf
    jr .ret1
  .nofail1:
  or b
  jr z, .ret1  ; Pass on DMG and keep going on GBC

  ; One possible misinterpretation that can leak through the above
  ; test is if wrapping around once turns off autoincrement for
  ; both reads and writes rather than reads never having it.
  ld a, b
  .autoinc_fluke_loop:
    ldh [rBCPS], a
    ldh [rOCPS], a
    ld b, a
    ldh a, [c]
    ld d, a
    ldh a, [c]
    xor d
    jr nz, .fail1
    ld a, [hl]
    xor [hl]
    jr nz, .fail1
    ld a, b
    add $43
    jr nc, .autoinc_fluke_loop

  ; Set first entry to white to avoid a visible flash while testing
  ; wraparound (write to $FF wrapping to $C0 and $C1, read $C1)
  ld a, $FF
  ldh [rBCPS], a
  ldh [c], a
  ldh [c], a
  ld a, $7F
  ldh [c], a
  ld a, $81
  ldh [rBCPS], a
  ld a, [c]
  cp $7F
  jr nz, .fail1

  ; Frame 2: Set first entry to white to avoid a visible flash,
  ; then ensure 32 of the 64 bytes of each palette can be read back
  ; (N.B. do NOT clear bit 7 of odd bytes)
  rst wait_vblank_irq
  ld a, $80 + 4 * 19
  ld b, $82
  call readback_half_palette
  jr nz, .fail1

  ; Make sure $00-$7F writes don't autoincrement
  ld hl, rOCPS
  call palette_ensure_no_007f_autoinc
  jr nz, .fail1
  ld hl, rBCPS
  call palette_ensure_no_007f_autoinc
  jr nz, .fail1
  or a
.ret1:
  jp lcd_off_and_return

readback_half_palette:
  ld e, 32
  ld c, low(rBCPD)
  ld hl, rOCPD
  .loop:
    ld d, a
    ld a, b
    ldh [rOCPS], a
    ldh [rBCPS], a
    ldh a, [c]
    cp d
    ret nz
    add 19
    cp [hl]
    ret nz
    add 19
    inc b
    dec e
    jr nz, .loop
  ret

;;
; @param HL either BCPS or OCPS
; @return ZF set if read back values are all is as expected
palette_ensure_no_007f_autoinc:
  ld a, $b0
  ld [hl+], a  ; seek to palette[$30]
  ld [hl], a
  ld [hl], a
  ld [hl-], a  ; palette [$30...$32] = b0 b0 b0
  ld a, $31
  ld [hl+], a  ; seek to palette[$31]
  ld [hl], a
  ld [hl], a   ; palette[$31] = 31 twice
  cp [hl]
  ret nz
  inc a
  dec hl
  ld [hl+], a  ; seek to palette[$32]
  ld a, [hl]
  cp $b0
  ret

coin_cram_blocked_writes::
  jr .start
  db "CRAM access blocking",10
  db "Palette writes in mode 3",10
  db "only advance the address;",10
  db "reads give $FF",0
.start:
  call lcd_on_blank
  ei
  rst wait_vblank_irq

  ; Initial load
  ld c, low(rOCPS)
  ld hl, rOCPD
  ld a, $B0
  ldh [c], a
  ld [hl], $01
  ld [hl], $02
  ld [hl], $03
  ld [hl], $04
  ld [hl], $05

  ; Early exit for DMG
  ldh [c], a
  ldh a, [hCapability]
  rla
  ccf
  sbc a    ; A = $00 if GBC, $FF if DMG
  or $01   ; A = expected value $01 if GBC, $FF if DMG
  cp [hl]  ; Compare to value read back
  jr nz, .fail1  ; if different, we're on the wrong model
  inc a          ; A = $00 if DMG
  jr z, .ret1    ; if that's the case, we're done here

  ; Complete initial load
  ld a, $A0
  ldh [c], a
  ld [hl], $06
  ld [hl], $07
  ld [hl], $08
  ld [hl], $09
  ld [hl], $0A
  ; OBJ CRAM contents:
  ; 20: 06 07 08 09 0A
  ; 30: 01 02 03 04 05
  ; address at 35 with autoincrement

  ; Seek in mode 3 to $30 with autoincrement.  Seeking should
  ; not depend on CRAM blocking.
  dec l
  lb de, $F0, STATF_LCD
  call write_D_mode_E
  inc l
  ; Write $0B, $0C, blocked, blocked, $0F
  lb de, $0B, STATF_HBL
  call write_D_mode_E
  lb de, $0C, STATF_OAM
  call write_D_mode_E
  lb de, $0D, STATF_LCD
  call write_D_mode_E
  ld [hl], $0E
  lb de, $0F, STATF_HBL
  call write_D_mode_E
  ; At 30-34 should be 0B 0C 03 04 FF. Verify this in vblank.
  ; 01 02 03 04 05 means seeking in mode 3 failed because the data
  ; went to 25-29 instead of 30-34.
  ; 0B 0C 0D 0E 0F means CRAM blocking is not handled.

  rst wait_vblank_irq
  ld hl, rOCPS
  ; when reading back values w/o waiting for a mode,
  ; reverse (HL address, C data) is smaller
  ld c, low(rOCPD)
  ld [hl], $30
  ldh a, [c]
  cp $0B
  jr nz, .fail1
  ld [hl], $31
  ldh a, [c]
  cp $0C
  jr nz, .fail1
  ld [hl], $32
  ldh a, [c]
  cp $03
  jr nz, .fail1
  ld [hl], $33
  ldh a, [c]
  cp $04
  jr nz, .fail1
  ld [hl], $34
  ldh a, [c]
  cp $0F
  jr z, .nofail1
  .fail1:
    scf
  .ret1:
    jp lcd_off_and_return
  .nofail1:

  ; Check read behavior during CRAM blocking
  ; Seek to $20 and read $06 in modes 0 and 2 and $FF in mode 3
  ; then seek to $20 and read $06 in mode 0
  ld a, $20
  ld [hl+], a  ; write address and go back to usual HL=data
  lb de, $06, STATF_HBL
  call read_D_mode_E
  jr nz, .fail1
  ld e,       STATF_OAM
  call read_D_mode_E
  jr nz, .fail1
  lb de, $FF, STATF_LCD
  call read_D_mode_E
  jr nz, .fail1
  ld a, $21  ; again, write address during mode 3
  ldh [rOCPS], a
  lb de, $07, STATF_HBL
  call read_D_mode_E
  jr nz, .fail1
  jr .ret1

;;
; Waits for a mode in STAT and then writes a value.
; To write a value and it's ones' complement, use write_D_notD_mode_E
; @param E mode to wait for
; @param HL address to write
; @param D value to write
write_D_mode_E:
  lb bc, STATF_LCD, low(rSTAT)
  .wait0loop:
    ld a, [$FF00+c]
    xor e
    and b
    jr z, .wait0loop
  .wait1loop:
    ld a, [$FF00+c]
    xor e
    and b
    jr nz, .wait1loop
  ld [hl], d
  ret

;;
; Waits for a mode in STAT and then reads a value.
; @param E mode to wait for
; @param HL address to read
; @param D value to expect
; @return A: read XOR expected; ZF: true if same
read_D_mode_E:
  lb bc, STATF_LCD, low(rSTAT)
  .wait0loop:
    ld a, [$FF00+c]
    xor e
    and b
    jr z, .wait0loop
  .wait1loop:
    ld a, [$FF00+c]
    xor e
    and b
    jr nz, .wait1loop
  ld a, [hl]
  xor d
  ret
