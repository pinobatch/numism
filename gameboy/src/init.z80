;
; Init code for Game Boy
;
; Copyright 2018 Damian Yerrick
; 
; This software is provided 'as-is', without any express or implied
; warranty.  In no event will the authors be held liable for any damages
; arising from the use of this software.
; 
; Permission is granted to anyone to use this software for any purpose,
; including commercial applications, and to alter it and redistribute it
; freely, subject to the following restrictions:
; 
; 1. The origin of this software must not be misrepresented; you must not
;    claim that you wrote the original software. If you use this software
;    in a product, an acknowledgment in the product documentation would be
;    appreciated but is not required.
; 2. Altered source versions must be plainly marked as such, and must not be
;    misrepresented as being the original software.
; 3. This notice may not be removed or altered from any source distribution.
;
include "src/hardware.inc"
include "src/global.inc"

; It is not strictly necessary to completely clear the display list,
; as lcd_clear_oam writes a "hide this sprite" value to all unused
; sprites.  But when Options > Exceptions > Unitialized RAM >
; break on read (reset) is on, BGB complains about copying
; uninitialized data to OAM even if said data is provably unused.
; So put "shut BGB up" commands behind a conditional.
bgbcompat equ 1

; For the purpose of hLocals, see a fairly long rant in global.inc
section "hram_locals", HRAM[hLocals]
  ds locals_size

STACK_SIZE EQU 64
section "stack", WRAM0, ALIGN[2]
stack_top: ds STACK_SIZE

section "bootregs_hram", HRAM
hCapability:: ds 1

section "bootregs", WRAM0
initial_a:: ds 1
initial_nr52:: ds 1
initial_b:: ds 1

section "rom_init", ROM0
reset_handler::
  di  ; Disable interrupts
  ld sp, stack_top + STACK_SIZE  ; Set up stack pointer (full descending)
  ld hl, initial_a
  ld [hl+], a
  xor $11
  cp 1
  ld a, 0
  rra
  ldh [hCapability], a
  ldh a, [rNR52]
  ld [hl+], a
  ld [hl], b

  call busy_wait_vblank  ; Spin because interrupts are not yet set up

  ; Rendering can be turned off only during blanking.  Fortunately
  ; the fadeout loop left us in vblank.  So set up the video
  ; hardware.
  xor a
  ldh [hCurKeys], a
  ldh [hNewKeys], a
  ld [wJoyIRQCapability], a
  ldh [rLCDC], a  ; turn off rendering
  ldh [rSCY], a   ; clear scroll
  ldh [rSCX], a   ; clear scroll
  ldh [rNR52], a  ; disable (and reset) audio
  if bgbcompat
    ; BGB triggers pedantic "reading uninitialized WRAM" exceptions
    ; when DMAing the X, tile number, and attribute of an OAM entry
    ; whose Y is offscreen.
    call lcd_clear_all_oam
    ld hl,lineImgBuf
    ld c,136
    rst memset_tiny
  endc
  cpl
  ldh [hLastKeyLY], a

  ld a, $80
  ldh [vblank_lcdc_value], a
  ldh [stat_lcdc_value], a

  ; Copy the sprite DMA routine to HRAM
  ld hl, hramcode_LOAD
  ld de, hramcode_RUN
  call memcpy_pascal16
  call run_dma

  ; Detect Super Game Boy
  call sgb_wait
  call sgb_wait
  call sgb_wait
  call sgb_wait
  call sgb_wait
  call detect_sgb

  jp main

section "HRAMCODE_src", ROM0
;;
; While OAM DMA is running, the CPU keeps fetching instructions
; while ROM and WRAM are inaccessible.  A program needs to jump to
; HRAM and busy-wait 160 cycles until OAM DMA finishes.
hramcode_LOAD:
  dw hramcode_RUN_end-hramcode_RUN
load "HRAMCODE", HRAM
hramcode_RUN:

;;
; Copy a display list from shadow OAM to OAM
; @param HL address to read once while copying is in progress
; @return A = value read from [HL]
run_dma::
  ld a,SOAM >> 8
  ldh [rDMA],a
  ld b,40
  ld a, [hl]
.loop:
  dec b
  jr nz,.loop
  ret

hramcode_RUN_end:
endl

; Small routines to attempt to pack into small unused spaces

section "memset_tiny",ROM0[memset_tiny]
;;
; Writes C bytes of value A starting at HL.
memset_tiny_impl::
  ld [hl+],a
  dec c
  jr nz,memset_tiny
  ret

section "memset_inc",ROM0
;;
; Writes C bytes of value A, A+1, ..., A+C-1 starting at HL.
memset_inc::
  ld [hl+],a
  inc a
  dec c
  jr nz,memset_inc
  ret

section "memcpy", ROM0
;;
; Copy a string preceded by a 2-byte length from HL to DE.
; @param HL source address
; @param DE destination address
memcpy_pascal16::
  ld a, [hl+]
  ld c, a
  ld a, [hl+]
  ld b, a
  ; fall through to memcpy

;;
; Copies BC bytes from HL to DE.
; @return A: last byte copied; HL at end of source;
; DE at end of destination; B=C=0
memcpy::
  ; Increment B if C is nonzero
  dec bc
  inc b
  inc c
.loop:
  ld a, [hl+]
  ld [de],a
  inc de
  dec c
  jr nz,.loop
  dec b
  jr nz,.loop
  ret
