include "src/hardware.inc"
include "src/global.inc"

; wCoinTmp must be below $DE00 to be mirrored into echo RAM.
; Thus I put it in WRAM0, not WRAMX.
section "COINSWRAM", WRAM0
wCoinTmp: ds 1

section "COINS", ROM0, ALIGN[2]

coin_list::
  ; stage 1: things no$gmb fails
  dw coin_add_hl_flags
  dw coin_add_sp_flags
  dw coin_apu_off_ignore_writes
  dw coin_apu_or_mask
  dw coin_apu_sweep_status
  dw coin_apu_len_env00_status
  dw coin_div_increases
  dw coin_lyc_to_hint
  dw coin_start_timer
  dw coin_vram_blocked_writes
  ; stage 2: things vba fails
  dw coin_ei_if_write
  dw coin_di_halt_sets_if
  dw coin_di_halt_2inc
  dw coin_di_halt_no_handler
  dw coin_daa_no_h
  dw coin_div_stops_apu
  dw coin_apu_off_clear
  dw coin_apu_status_ro
  dw coin_push_af_low_4
  dw coin_oam_bug
  ; stage 3: mostly things vba-m fails
  dw coin_wave_ram_locked
  dw coin_ei_di
  dw coin_stat_blocking
  dw coin_echo_ram_write
  dw coin_other_or_mask
  dw coin_mode_3_length
  dw coin_flashing_12
  dw coin_initial_nr52
  dw coin_no_29
  dw coin_no_30
  ; stage 4: begin dmg/gbc differences
  dw coin_no_31
  dw coin_no_32
  dw coin_no_33
  dw coin_no_34
  dw coin_no_35
  dw coin_no_36
  dw coin_no_37
  dw coin_wave_ram_retrigger
  dw coin_gbc_palette_readback
  dw coin_stat_write_ff


; Controls whether tests using init_silent_apu are audible.
; Set to nonzero during debugging.
APU_NOT_SILENT equ 0

section "STAGE1COINS", ROM0

; Each coin is a subroutine then a description.
; The subroutine returns carry clear for pass or set for fail

coin_add_hl_flags:
  jr .start
  db "add hl flags",10
  db "add hl,de; add hl,sp",10
  db "Z same, N=0, HC=carry",10
  db "from bits 11 and 15",0
.start:
  ld de, $8800
  push de
  pop af  ; Clear ZNHC

  ld hl, $7800
  add hl, de  ; Set HC
  push af
  pop bc
  ld a, c
  cp $30
  jr nz, pass_if_Z_flag

  and a  ; Clear ZN, set H, clear C
  ld hl, $8700
  add hl, de  ; Clear NH, set C
  push af
  pop bc
  ld a, c
  cp $10
  jr nz, pass_if_Z_flag

  sub a  ; Set ZN, clear H
  ld hl, $6800
  add hl, de  ; Clear N, set HC
  push af
  pop bc
  ld a, c
  cp $A0
  jr nz, pass_if_Z_flag

  scf
  sbc a  ; Clear Z, set NHC
  ld hl, $7700
  add hl, de  ; Clear NHC
pass_if_all_flags_clear:
  push af
  pop bc
pass_if_C_eq_0:
  ld a, c
pass_if_A_eq_0:
  or a
pass_if_Z_flag:
  jp nz, test_failed
  ret

coin_add_sp_flags:
  jr .start
  db "add sp flags",10
  db "add sp,rel; ld hl,sp+rel",10
  db "Z=N=0, HC=carry from",10
  db "bits 3 and 7 of unsigned",10
  db "add to SP low byte",0
.start:
  ld hl, sp+0
  ld sp, $D000
  add sp, -2
  ld sp, hl  ; No way to set carry if SPL = $00
  jr pass_if_all_flags_clear

coin_apu_off_ignore_writes:
  jr .start
  db "APU off ignore writes",10
  db "FF10-FF25 writes not",10
  db "honored while APU off, nor",10
  db "revealed when turned on",0
.start:
  call zerofill_apu
  xor a
  ldh [rNR52], a  ; APU is off

  ; Write test pattern
  ld a, $02
  ldh [rNR12], a
  add a
  ldh [rNR22], a
  add a
  ldh [rNR42], a
  add a
  ldh [rNR43], a
  add a
  ldh [rNR51], a
  add a
  ldh [rNR50], a

  call .read_test_pattern
  jr nz, .local_test_failed
  ld a, $80
  ldh [rNR52], a
  call .read_test_pattern
.local_test_failed:
  jp nz, test_failed
  ldh [rNR52], a
  ret

.read_test_pattern:
  ld hl, rNR12
  ld a, [hl]
  ld l, low(rNR22)
  or [hl]
  ld l, low(rNR42)
  or [hl]
  ld l, low(rNR43)
  or [hl]
  ld l, low(rNR51)
  or [hl]
  ld l, low(rNR50)
  or [hl]
  ret


apu_or_mask_values:
  db $80,$3F,$00,$FF,$BF
  db $FF,$3F,$00,$FF,$BF
  db $7F,$FF,$9F,$FF,$BF
  db $FF,$FF,$00,$00,$BF
  db $00,$00 ;,$70
apu_or_mask_values_end:

;;
; Turns on the APU and writes $00 to all registers.
; @return A=C=0, HL=NR52
zerofill_apu:
  ; Power cycle the APU for good measure
  ld hl, rNR52
  xor a
  ld [hl], a
  ld [hl], $80

  ; Zero fill APU registers other than power
  ld c, apu_or_mask_values_end-apu_or_mask_values
  ld hl, rNR10
  jp memset_tiny

coin_apu_or_mask:
  jr .start
  db "APU OR mask",10
  db "When APU filled with 0 bytes,",10
  db "unused bits read back 1",0
.start:
  call zerofill_apu

pass_if_apu_equals_or_mask:
  ; Values in APU must equal OR mask
  lb bc, apu_or_mask_values_end-apu_or_mask_values, low(rNR10)
  ld hl, apu_or_mask_values
  .compareloop:
    ld a, [$FF00+c]
    cp [hl]  ; last thing that touches the carry.  Z after CP means NC.
    jp nz, test_failed
    inc hl
    inc c
    dec b
    jr nz, .compareloop
  ret

coin_apu_sweep_status:
  jr .start
  db "APU sweep status",10
  db "Upward sweep on pulse 1",10
  db "clears channel status;",10
  db "downward sweep doesn't",0
.start:
  call init_silent_apu
  di

  ld a, $25
  ld bc, $8787
  call time_sweep_note
  ld a, d  ; Fail if D is zero
  cp 1
  ret c

  ld a, $1A
  ld bc, $8300
  call time_sweep_note
pass_if_D_nonzero:
  ld a, d
  or a
  jp nz, test_failed
  ret

;;
; Turn on the APU; just don't route any channels to any speakers
init_silent_apu:
  ld hl, rNR52
  xor a
  ld [hl], a
  ld [hl], $80
  dec l
  if APU_NOT_SILENT
    ld a, $77  ; uncomment this to debug APU tests
  endc
  ld [hl-], a
  ld [hl], a
  ret

time_sweep_note:
  ld hl, rNR10
  ld [hl+], a  ; sweep direction
  ld a, $80
  ld [hl+], a  ; duty and length counter
  ld [hl+], a  ; envelope
  ld [hl], c
  inc l
  ld [hl], b
  ; fall through to time_pulse1_note

;;
; Waits a tenth of a second for a note to end.
; @return DE: negative if stopped or 0 if still playing
time_pulse1_note:
  ; Give a sweep 1/8 second cycles to ring out
  ld hl, rNR52
  ld de, -96768/9
  .waitloop:
    bit 0, [hl]
    ret z
    inc e
    jr nz, .waitloop
    inc d
    jr nz, .waitloop
  ret

time_pulse1_envb_lenc:
  call play_pulse1_envb_lenc
  jr time_pulse1_note

play_pulse1_envb_lenc:
  ld hl, rNR10
  xor a
  ld [hl+], a
  ld [hl], c
  inc l
  ld [hl], b
  inc l
  ld [hl+], a
  ld [hl], $C7
  ret

coin_apu_len_env00_status:
  jr .start
  db "APU length & envelope 00",10
  db "Length counter expiry or",10
  db "envelope set to 0 clears",10
  db "channel status",0
.start:
  call init_silent_apu
  di
  ; Control arm: No envelope, no length counter
  ; Note should play to completion (DE = 0)
  lb bc, $80, $80
  call time_pulse1_envb_lenc
  rl d
  ret c
  ; Experiment arm 1: Length counter set to 4 ticks (1/64 second)
  ; Note should stop (DE < 0)
  lb bc, $80, $7C
  call time_pulse1_envb_lenc
  ld a, d
  cp 1
  ret c
  ; Experiment arm 2: Setting the envelope to $00 through $07
  ; disables the DAC, which in turn disables the channel until
  ; the next note-on.  Note should stop (DE < 0)
  lb bc, $00, $80
  call time_pulse1_envb_lenc
  ld a, d
  cp 1  ; A=0: fail; A=1: pass
  ret

  ; Ideas for experiment arms in later coins:
  ; Envelope $21: Note fadeout to 0 does not clear status
  ; Envelope $08: Silent + increase + sweep rate 0 (never)
  ; does not clear status

coin_div_increases:
  jr .start
  db "DIV increases",10
  db "FF04 timer increases",10
  db "by 1 unit per period",0
.start:
  ld d, 10  ; number of trials
  ld hl, rDIV
  .trialloop:
    ld e, 10  ; timeout loop for this trial
    ld c, [hl]
    .timeoutloop:
      ld a, [hl]
      sub c
      jr nz, .trialdone
      dec e
      jr nz, .timeoutloop
    .trialdone:
    cp 1
    jp nz, test_failed
    dec d
    jr nz, .trialloop
  ret

coin_lyc_to_hint:
  jr .start
  db "Getting the hint",10
  db "Schedule LYC interrupt at",10
  db "FF41, then horizontal blank",10
  db "interrupt on same line",0
.start:
  call lcd_on_blank
  call measure_mode3
  push af
  call lcd_off
  pop af
  cp 4  ; If A < 4 then there was only one interrupt
  ret

;;
; Turns on the LCD with OAM cleared to 0, LYC=64, scrolling at X=0,
; all-white BGP, and IE set to vblank only
lcd_on_blank:
  call lcd_off
  ld hl, _OAMRAM     ; clear all of OAM to 0
  ld c, $A0
  rst memset_tiny
lcd_on_blank_keep_oam:
  ld a, 64
  ldh [rLYC], a
  xor a
  ldh [rSCX], a
  ldh [rBGP], a    ; hide everything during test
  inc a
  ldh [rIE], a
  ld a, LCDCF_ON|LCDCF_BGON|LCDCF_OBJON|LCDCF_BG8800|LCDCF_BG9800|LCDCF_WIN9C00
  ldh [stat_lcdc_value], a
  ldh [rLCDC], a
  ret

;;
; Analogous to the "does the timer even work?" check from blargg's
; instr_timing test, adding a timeout on the start_timer part
coin_start_timer:
  jr .start
  db "Four-cycle timer",10
  db "FF07=5,FF05=-20 sets FF0F",10
  db "timer bit after 80 cycles;",10
  db "can write 0 to FF05 and",10
  db "read 0 after 3 cycles",0
.start:
  ; 1. Set up the timer
  di
  ld hl, rIE
  res IEB_TIMER, [hl]  ; keep VBA from calling handlers despite DI
  ld l, low(rIF)
  ld a, 5
  ldh [rTAC], a  ; four mcycles per increment, 262 kHz
  xor a
  ldh [rTMA], a  ; set reload value for full range
  scf  ; make ret nz and ret z in the following
  ld [hl], a     ; ack all interrupts (everywhere but rew.)

  ; 2. Ensure the timer increases from -20 to 0 in 80 cycles
  ld a, 256-20
  ldh [rTIMA], a
  ld b, 20-2
  ; This delay loop triggers a heisenbug in No$gmb:
  ; IF.2 gets set if and only if not step debugging
  .delayloop1:
    dec b
    jr nz, .delayloop1
  bit IEB_TIMER, [hl]
  ret nz
  bit IEB_TIMER, [hl]
  ret z
  ; If we've reached here in No$gmb then step debugging was off.
  ; Fall through to the second half of the test.

  ; 3. Align to 4-cycle timer by looping while [. . W .|. R . .] for
  ; an odd number of cycles until we hit [W . . R], where W and R
  ; represent TIMA writes and reads.  In particular, W does NOT reset
  ; the phase of this 4-cycle timer; it's instead a tap off DIV.
  ; (No$gmb has failed this one in the past)
sync_to_TIMA:
  ld b, 4
.loopfifteen:
  xor a           ; 1
  ldh [rTIMA], a  ; 3 write on cycle N
  ldh a, [rTIMA]  ; 3 read on cycle N+3
  or a            ; 1
  ret z           ; 2
  nop             ; 1
  dec b           ; 1
  jr nz, .loopfifteen  ; 3
test_failed:
  scf
  ret

; We assume we can read and write in mode 1. Lots of games
; don't work otherwise.
; 
; The only emulator I'm aware of that doesn't make mode 1 wide open
; is one that ISSOtm mentioned:
; the Game Boy emulator in PokÃ©mon Stadium 2 Game Boy Tower.
; Only the vblank handler can access VRAM.  Once it does RETI,
; VRAM is locked even if mode 1 is still in effect.
coin_vram_blocked_writes:
  jr .start
  db "VRAM/OAM blocked writes",10
  db "VRAM and OAM are",10
  db "inaccessible in mode 3.",10
  db "OAM inaccessible in mode 2.",0
.start:
  call lcd_off
  ld hl, $9F00
  push hl
  xor a
  ld c, a
  rst memset_tiny
  call lcd_on_blank

  ; Write to video memory.  BGB gives lots of invalid write
  ; exceptions here; press Shift+F9 Esc to skip them.
  pop hl
  call write_in_all_modes
  ld hl, _OAMRAM+$80
  call write_in_all_modes

  ; Read back
  ld hl, $9F00
  call write_in_all_modes_readback
;  ld [debughex+0], a
  cp %00010100  ; VRAM: mode 3 blocked
  jr nz, .local_failed
  ld hl, _OAMRAM+$80
  call write_in_all_modes_readback
;  ld [debughex+1], a
  ; On Game Boy, Super Game Boy, and Game Boy pocket, the (invalid)
  ; writes to OAM mess up the previous valid writes due to the OAM
  ; bug.  Disregard the affected writes.
  and %00111111  ; disregard writes affected by OAM bug
  cp %00111100  ; OAM: modes 2 and 3 blocked
.local_failed:
  jp nz, fail_and_turn_off_ppu
  call lcd_off
  or a
  ret

write_in_all_modes:
  lb de, "0", 0
  call write_in_mode_E
  lb de, "1", STATF_VBL
  call write_in_mode_E
  lb de, "2", STATF_OAM
  call write_in_mode_E
  lb de, "3", STATF_LCD
  call write_in_mode_E
  lb de, "O", STATF_OAM
  call write_in_mode_E
  lb de, "P", STATF_LCD
  call write_in_mode_E
  lb de, "H", 0
  call write_in_mode_E
  lb de, "V", STATF_VBL
  ; fall through
;;
; @param D byte to write
; @param E mode to write in
write_in_mode_E:
  lb bc, STATF_LCD, low(rSTAT)
  .wait0loop:
    ld a, [$FF00+c]
    xor e
    and b
    jr z, .wait0loop
  .wait1loop:
    ld a, [$FF00+c]
    xor e
    and b
    jr nz, .wait1loop
  ld [hl], d
  ld a, d
  cpl
  inc l
  ld [hl], a
  inc l
  ret

write_in_all_modes_readback:
  push hl
  ei
  call wait_vblank_irq
  pop hl
  ld b, 1
  .loop:
    ld a, [hl+]
    xor [hl]
    inc l
    cp $FF
    rl b
    jr nc, .loop
  ld a, b
  ret

; mode 3 duration measurement ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; This kernel will be used by multiple coins to measure the effect of
; sprite positions, SCX&7, and WX&7 on duration of mode 3.

section "measure_mode3", ROM0

;;
; Measure the duration of mode 3 on line LYC in M-cycles
measure_mode3:
  ; Allow only IRQs on the chosen scanline to cause an interrupt
  ld c, low(rSTAT)
  ld a, STATF_LYC
  ld [$FF00+C], a
  ld a, [rIE]
  push af
  ld a, IEF_STAT
  ldh [rIE], a

  ; rew. doesn't respond to IF writes, and VBA behaves badly with
  ; di halt).  So drain out pending interrupts while preparing for
  ; the steps to come.
  ei
  ld a, STATF_MODE00
  ld hl, sp+-2

  ; At the start of mode 2 on the chosen line, the CPU calls the STAT
  ; interrupt handler, which happens to take as long as mode 2.
  ; This leaves us at the start of mode 3.  Include the halt in the
  ; length calculation to compensate for it taking an extra cycle
  ; to schedule the hblank interrupt.
.nopslide_start:
  halt

  rept 3
    nop
  endr

  ; Schedule another interrupt at the end of drawing.
  ; Caution: On DMG, writing to STAT writes FF then the value.
  ; This causes an extra interrupt during mode 3 outside line LYC,
  ; on which Road Rash (DMG version) and Xerd no Densetsu depend.
  ; But because we're in LYC, we're safe.
  ld [$FF00+C], a

  ; now we are in mode 2 and measuring the remainder of mode 2
  ; plus all of mode 3
  rept 75
    nop
  endr

  pop af
  ldh [rIE], a  ; Restore previous interrupt setting
  ld a, [hl]    ; Read progress into slide from stack red zone
  sub low(.nopslide_start)
  ret

; Stage 2 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "STAGE2COINS", ROM0

coin_ei_if_write:
  jr .start
  db "IF write causes IRQ",10
  db "With interrupts on, writing",10
  db "to pending interrupts register",10
  db "calls handler",0
.start:
  di
  xor a
  ldh [rTAC], a    ; Disable timer so that only fake interrupt happens
  ld bc, rIF
  ld [bc], a       ; Acknowledge all interrupts
  ld a, IEF_TIMER
  ldh [rIE], a     ; Allow only timer interrupts
  ld hl, sp-1      ; Get a pointer to the stack red zone
  ei
  push bc
  pop bc           ; Place IF address in the red zone
  ldh [$FF00+c], a ; Trigger an interrupt, overwriting the red zone
.return_addy:      ; with this return address
  ld a, [hl-]      ; the return address should match 
  cp high(.return_addy)
  jp nz, test_failed
  ret

coin_di_halt_sets_if:
  jr .start
  db "di halt sets IF bit",10
  db "Halting with interrupts off",10
  db "sets a bit in the pending",10
  db "interrupts register",0
.start:
  di
  xor a
  ldh [rIF], a
  ld a, IEF_TIMER
  ldh [rIE], a     ; Listen only to timer interrupts
  ld a, 7
  ldh [rTAC], a    ; Enable timer
  halt
  nop
  ldh a, [rIF]
  and IEF_TIMER    ; Make sure a timer interrupt arrived
  cp 1  ; A=0: fail; A=1: pass
  ret

; Also called the "halt bug", and beware claims The Smurfs (SGB)
; relies on it
coin_di_halt_2inc:
  jr .start
  db "di halt double increment",10
  db "Halting with interrupts off",10
  db "and a pending interrupt",10
  db "runs the next byte twice",0
.start:
  di
  call schedule_timer_interrupt
  ld de, 0
  halt
  inc d  ; Increment D once
  halt
  inc e  ; Increment E, twice
  ld a, d
  dec a
  jp nz, test_failed
  ld a, e
  cp 2
  jp nz, test_failed
  ret

coin_di_halt_no_handler:
  jr .start
  db "di halt calls no handler",10
  db "Halting with interrupts off",10
  db "does not call the interrupt",10
  db "handler",0
.start:
  di
  call schedule_timer_interrupt
  ld bc, rIF
  push bc          ; Clear the stack red zone
  pop bc
  halt
  nop
pass_if_b_in_red_zone:
  ld hl, sp-1      ; Get a pointer to the stack red zone
  ld a, [hl-]      ; The value of B should still be there
pass_if_A_eq_B:
  cp b
  jp nz, test_failed
  ret

schedule_timer_interrupt:
  ld a, 5
  ldh [rTAC], a    ; Enable timer
  xor a
  ldh [rTIMA], a   ; Schedule timer
  ldh [rTMA], a
  ldh [rIF], a     ; Acknowledge all interrupts
  ld a, IEF_TIMER
  ldh [rIE], a     ; Now listen for interrupts
  ret

coin_daa_no_h:
  jr .start
  db "daa clears half carry",10
  db "ld a,5 add a daa = $10",10
  db "ld a,9 add a daa = $18",10
  db "H is clear after each",0
.start:
  ld a, $05
  ld b, $10
  call add_a_daa_eq_b_no_h
  ret c
  ld a, $09
  ld b, $18
add_a_daa_eq_b_no_h:
  add a
  daa
  push af
  pop de
  cp b
  jr nz, .local_test_failed
  bit 5, e
.local_test_failed:
  jp nz, test_failed
  ret

coin_div_stops_apu:
  jr .start
  db "DIV stops APU sequencer",10
  db "Length counter doesn't end",10
  db "note if writing DIV at >1 kHz",0
.start:
  call init_silent_apu
  ; Control arm was in "APU length & envelope 00" from stage 1
  lb bc, $80, $7C  ; experiment arm: length counter
  call play_pulse1_envb_lenc
  ldh [rDIV], a
  ld bc,65536-24576
  .loop:
    inc c  ; If I inc c only once, the test fails.
    inc c  ; Apparently I need to keep it UNDER 1024 cycles per write
    jr nz, .loop
    ldh [rDIV], a
    ld a, [rNR52]  ; bit 1 becomes 0 when it stops
    rra
    ccf  ; carry set if it has stopped
    ret c
    inc b
    jr nz, .loop
  ld a, c  ; APU off!
  ld [rNR52], a
  ret

coin_apu_off_clear:
  jr .start
  db "What APU off clears",10
  db "FF26=00 clears readable",10
  db "sound registers and not",10
  db "wave RAM",0
.start:
  ; Turn on the APU, fill with $FF
  ld a, $FF
  ldh [rNR52], a
  ld c, apu_or_mask_values_end-apu_or_mask_values
  ld hl, rNR10
  rst memset_tiny
  call set_wave_ram_signature

  ; Turn off the PPU and OR mask must be read back
  xor a
  ldh [rNR52], a
  call pass_if_apu_equals_or_mask
  ret c
  call compare_wave_ram_signature
  ret c

  ; Turn the APU on and see if it still reads 0
  ld a, $80
  ldh [rNR52], a
  call pass_if_apu_equals_or_mask
  ; Fall through to pass if wave RAM holds correct data

compare_wave_ram_signature:
  ldh a, [_AUD3WAVERAM+14]
  cp $0C
  jr nz, .local_test_failed
  ldh a, [_AUD3WAVERAM+15]
  cp $A5
.local_test_failed:
  jp nz, test_failed
  ret

set_wave_ram_signature:
  ld a, $0C
  ldh [rNR30], a  ; ensure wave is stopped
  ldh [_AUD3WAVERAM+14], a
  ld a, $A5
  ldh [_AUD3WAVERAM+15], a
  ret

coin_apu_status_ro:
  jr .start
  db "APU status read-only",10
  db "Writes to bits 6-0 of FF26",10
  db "are not read back",0
.start:
  ld hl, rNR52
  ld [hl], 0
  ld a, $70
  cp [hl]
  jr nz, .local_test_failed
  ld a, $F0
  ld [hl], $FF  ; should read $70
  cp [hl]
.local_test_failed:
  jp nz, test_failed
  ret

coin_push_af_low_4:
  jr .start
  db "flags low nibble",10
  db "push bc pop af",10
  db "  push af pop de",10
  db "Pushes flags bit 3-0 as 0",0
.start:
  ld bc, $0CA5
  push bc
  pop af
  push af
  pop de

  ld a, b
  cp d
  jp nz, test_failed
  ld a, c
  and $F0
  cp e
  jp nz, test_failed
  ret

;;
; This is a very rough test for the DMG OAM bug.
; It represents a couple firsts:
; 1. In the game, it gives users of emulators other than Emulicious
;    or SameBoy their first experience of a counterfeit coin.
; 2. It adjusts for different expected behavior on Game Boy
;    compared to Game Boy Color.  This foreshadows stage 4.
coin_oam_bug:
  jr .start
  db "16-bit inc corrupts OAM",10
  db "With H=FE, inc hl in mode 2",10
  db "corrupts OAM on B&W system",0
.start:
  call lcd_off  ; we can stay in mode 1 as long as we need
  ld a, $A5
  call oamset_inc  ; modes 0-1 not affected by bug

  ; Ensure that OAM readback works, even for the 4 unused bits
  ; of DMG's palette/flip/priority byte
  ld b, $A5
  call oamcmp_inc
  ld a, l
  ld [debughex+0], a
  ret c

  xor a
  ld [rOBP0], a

  call lcd_on_blank_keep_oam

  ; In case the first line is "weird", wait for a non-weird line
  ld hl, rLY
  ld a, 20
  .goto20:
    cp [hl]
    jr nz, .goto20

  ; Wait for mode 0 then mode 2
  ; This can be a lot faster than when waiting for an arbitrary mode
  ld b, high(_OAMRAM)
  ld d, b
  ld l, low(rSTAT)
  .gotom0:
    bit STATB_BUSY, [hl]
    jr nz, .gotom0
  .gotom2:
    bit STATB_BUSY, [hl]
    jr z, .gotom2
  dec h

  ; We're 5 to 9 cycles into mode 2.  Now trigger OAM bug.
  inc hl
  dec hl
  inc bc
  dec bc
  inc de
  dec de

  ; Measure the damage
  call lcd_off
  ld b, $A5
  call oamcmp_inc
  sbc a
  ld b, a  ; A=FF for difference, 00 for identical
  ld a, l
  ld [debughex+1], a

  ld a, [initial_a]
  xor $11  ; A=0 for GBC, nonzero for mono (DMG/MGB/SGB)
  cp 1
  sbc a    ; A=$FF for GBC, $00 for mono
  xor b    ; A=$00 for fail, $FF for success
  cpl
  add a
  ret

;;
; Writes test pattern starting at A
oamset_inc:
  ld hl, _OAMRAM
  ld c, 160
  jp memset_inc

;;
; Compares OAM to oamset_inc written data, starting at B
oamcmp_inc:
  ld hl, _OAMRAM
  ld c, 160
  .loop:
    ld a, [hl]
    sub b
    xor l
    jp nz, test_failed
    inc l
    dec c
    jr nz, .loop
  ret

; Stage 3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

section "STAGE3COINS", ROM0

coin_wave_ram_locked:
  jr .start
  db "Wave RAM locked while on",10
  db "During a wave note, wave",10
  db "RAM reads as the byte at",10
  db "the play pointer or $FF",10
  db 34,"NO BOY! NO DEMO!",34,0
.start:
  call zerofill_apu
  call load_sawtooth
  if APU_NOT_SILENT
    ld a, $77
    ldh [rNR51], a
    ldh [rNR50], a
    ld a, $20
    ld [rNR32], a
  endc
  xor a
  ld [rNR33], a
  ld a, $87
  ld [rNR30], a  ; always give and take wave RAM before new note
  ld [rNR34], a

  ; Prepare to read $44 and $33 from wave RAM and pass if it differs
  ld hl, _AUD3WAVERAM+4
  ld b, 2

  ; But first ensure the channel is running, even while otherwise muted
  ld a, [rNR52]
  and $04
  jr z, fail_and_turn_off_apu

  ; Now read the pattern from wave RAM, in reverse order to ensure
  ; we aren't hitting a freak edge case where we're reading exactly
  ; the bytes that the current play pointer is at, and it advances
  ; between reads.
  ld a, [hl-]
  cp $44
  jr nz, pass_and_turn_off_apu
  ld a, [hl-]
  cp $33
  jr nz, pass_and_turn_off_apu
fail_and_turn_off_apu:
  xor a
  ldh [rNR52], a
  scf
  ret
pass_and_turn_off_apu:
  xor a
  ldh [rNR52], a
  ret

load_sawtooth:
  ld hl, _AUD3WAVERAM
  xor a
  ldh [rNR30], a  ; $00: give wave RAM to CPU; $80: give it to APU
  .loop:
    ld [hl+], a
    add $11
    jr nc, .loop
  ret

; Inspired by mooneye/âacceptance/ârapid_di_ei.gb
; VBA 1.7 gets this one right and VBA-M doesn't.
coin_ei_di:
  jr .start
  db "ei di calls no handler",10
  db "Alternating ei and di does",10
  db "not call the interrupt handler",10
  db 34,"...had a farm, E-I-E-I-D'oh!",34,0
.start:
  di
  ld a, IEF_TIMER
  ldh [rIF], a
  ldh [rIE], a
  ld bc, rIF
  push bc          ; Clear the stack red zone
  pop bc
  ei
  di
  ei
  di
  nop
  jp pass_if_b_in_red_zone

STAT_BLOCKING_LY = 16
coin_stat_blocking:
  jr .start
  db "STAT blocking",10
  db "FF41=68 (LYC+hblank+OAM)",10
  db "STAT interrupt waits for all",10
  db "to turn off before firing again",0
.start:
  call lcd_on_blank  ; LYC is well below STAT_BLOCKING_LY
  ld a, IEF_STAT
  ldh [rIE], a
  ei  ; Drain out any pending interrupts

  ; Spin until the line where the test starts
  .waitforaline:
    ldh a, [rLY]
    cp STAT_BLOCKING_LY
    jr nz, .waitforaline

  ; Wait for this line's mode 3
  ld c, STATF_MODE10|STATF_MODE00|STATF_LYC
  call set_stat_c_in_mode_3

  ; Halt, ensure mode 0 on the same line
  halt
  ldh a, [rSTAT]
  and b
  jr nz, fail_and_turn_off_ppu
  ldh a, [rLY]
  cp STAT_BLOCKING_LY
  jr nz, fail_and_turn_off_ppu

  ; While in mode 0 (hblank) of line STAT_BLOCKING_LY, STAT remains
  ; on.  Change LYC to STAT_BLOCKING_LY+1 so that STAT can remain on
  ; throughout that line as well.  Then it goes low after mode 2 (OAM
  ; scan) of line STAT_BLOCKING_LY+2 and high again after that line.
  ; 
  ; SBLY:   2222222222333333333333333333333/000000000000000000*000000
  ; SBLY+1: 222222222233333333333333333333300000000000000000000000000
  ; SBLY+2: 222222222\333333333333333333333/0000000000000000000000000
  ; Key: * where we are now; / STAT turns on; \ STAT turns off
  inc a
  ldh [rLYC], a

  ; Halt, ensure mode 0 on line SBLY+2
  halt
  ldh a, [rSTAT]
  and b
  jr nz, fail_and_turn_off_ppu
  ldh a, [rLY]
  cp STAT_BLOCKING_LY+2
  jr nz, fail_and_turn_off_ppu
pass_and_turn_off_ppu:
  call lcd_off
  or a
  ret

fail_and_turn_off_ppu:
  call lcd_off
  scf
  ret

;;
; Waits for mode 3 then writes C to STAT.  Changing STAT while in
; mode 3 helps avoid the DMG-only STAT bug (on which Road Rash and
; Xerd rely).
; @return A = C = new STAT value; B = STATF_LCD
set_stat_c_in_mode_3:
  ld b, STATF_LCD
  .waitformode3:
    ldh a, [rSTAT]
    and b
    xor b
    jr nz, .waitformode3
  ld a, c
  ldh [rSTAT], a
  ret

coin_echo_ram_write:
  jr .start
  db "Echo RAM writes to WRAM",10
  db "Value written to E000-FDFF",10
  db "is read from corresponding",10
  db "C000-DDFF",0
.start:
  ld hl, wCoinTmp
  ld de, wCoinTmp+$2000  ; echo RAM
  ld a, $69  ; nice
  ld b, $A5
  ld [hl], b  ; Write to WRAM
  ld [de], a  ; Overwrite WRAM via echo RAM
  xor [hl]    ; Read WRAM
  ret z
  scf
  ret

coin_other_or_mask:
  jr .start
  db "OR mask for other regs",10
  db "Unused bits of P1, SC, TAC,",10
  db "IF, and STAT read as 1",10
  db "but not OBP0/1 or IE;",10
  db "unmapped regs read $FF",0
.start:
  ld hl, regs_with_ormask
  .with_ormask_loop:
    ld a, [hl+]
    ld c, a
    ld a, [hl+]
    ld d, a     ; D: mask
    ld a, [hl+]
    ld e, a     ; E: first write value
    ldh [c], a  ; Write first write value
    ldh a, [c]
    and d
    cp d
    jr nz, .fail_nz
    ld a, e
    xor d
    ldh [c], a  ; Second write value is first ^ mask
    ldh a, [c]
    and d
    cp d
    jr nz, .fail_nz
    ld a, l
    xor low(regs_wo_ormask)
    jr nz, .with_ormask_loop

  ld d, $69  ; thue-morse comparison value
  .wo_ormask_loop:
    ld a, [hl+]
    ld c, a
    ld a, d
    ldh [c], a
    ldh a, [c]
    cp d
  .fail_nz:
    jp nz, test_failed
    cpl
    ldh [c], a
    ldh a, [c]
    cpl
    cp d
    jr nz, .fail_nz
    ld a, l
    xor low(regs_unmapped)
    jr nz, .wo_ormask_loop
  ldh a, [c]  ; clear IE

  .unmapped_range_loop:
    ld a, [hl+]
    ld c, a
    ld a, [hl+]
    ld d, a  ; D: end of range
    .unmapped_loc_loop:
      xor a
      ldh [c], a
      ldh a, [c]
      inc a
      jr nz, .fail_nz
      ld a, c
      inc c
      cp d
      jr nz, .unmapped_loc_loop
    ld a, l
    xor low(regs_unmapped_end)
    jr nz, .unmapped_range_loop
  ret

; I found a more compact representation of Gekkio's OR mask tests in
; mooneye-gb/acceptance/bits/unused_hwio-GS.s
;
; regs_with_ormask
; 1. Write wrvalue to reg
; 2. Read rdvalue from reg
; 3. If (rdvalue & mask) != mask, fail
; 4. Write wrvalue^mask to reg
; 5. Read rdvalue from reg
; 6. If (rdvalue & mask) != mask, fail
;
; regs_wo_ormask
; 1. Write $69 to reg
; 2. Read reg
; 3. If (rdvalue & mask) != $69, fail
; 4. Write $96 to reg
; 5. Read reg
; 6. If (rdvalue & mask) != $96, fail
;
; regs_unmapped
; for reg from low through high inclusive:
; 1. Write $00 to reg
; 2. Read rdvalue from reg
; 3. if rdvalue != $FF, fail

def STATF_UNUSED equ $FF ^ (STATF_LYC|STATF_MODE10|STATF_MODE01|STATF_MODE00|STATF_LYCF|STATF_LCD)

regs_with_ormask:
  ;  reg     mask       wrvalue
  db low(rP1),    %11000000, %11111111
  db low(rSC),    %01111110, %01111110
  db low(rTAC),   %11111000, %11111000
  db low(rIF),    %11100000, %11100000
  db low(rSTAT),  STATF_UNUSED, STATF_UNUSED
regs_wo_ormask:
  db low(rOBP0), low(rOBP1), low(rIE)
regs_unmapped:
  ; low, high
  db $03, $03
  db $08, $0E
  db $15, $15
  db $1F, $1F
  db $27, $29
  db $4C, $4E
regs_unmapped_end:


coin_mode_3_length:
  jr .start
  db "Mode 3 length",10
  db "Mode 3 without sprites",10
  db "lasts 40 to 45 cycles;",10
  db "with 10 or 16 sprites 8px",10
  db "apart lasts 64 to 72", 0
.start:

  ; Measure with 0 sprites
  call lcd_on_blank
  call measure_mode3
  add -46  ; map 40-45 to 245-255
  cp -6
.fail:
  jp c, fail_and_turn_off_ppu

  ; Measure with 10 sprites
  lb bc, 10, 8
  call .test_with_full_load
  ld e, a
  add -73
  cp -9
  jr c, .fail

  ; Whatever 10 was, 16 needs to match
  push de
  lb bc, 16, 8
  call .test_with_full_load
  pop de
  sub e
  cp 1  ; CF=1 if match
  ccf
  jr c, .fail
  call lcd_off
  or a
  ret

.test_with_full_load:
  ; Put B sprites spaced 8 pixels apart
  ld hl, SOAM
  ld d, 8+8  ; X position
  .loop:
    ld a, 60+16
    ld [hl+], a
    ld a, d
    ld [hl+], a
    add c
    ld d, a
    xor a
    ld [hl+], a
    ld [hl+], a
    djnz .loop
  ld a, 160
  sub l
  ld c, a
  xor a
  rst memset_tiny

  ; send them to the PPU and see how long it took
  rst wait_vblank_irq
  call run_dma
  jp measure_mode3

; inspired by Gekkio's timer/rapid_toggle
coin_flashing_12:
  jr .start
  db "Flashing 12",10
  db "TAC at 4 kHz, 12 cycles on,",10
  db "12 cycles off, should",10
  db "eventually count up", 0
.start:
  ld a, IEF_TIMER
  ldh [rIE], a
  xor a
  ldh [rIF], a
  ldh [rTAC], a
  ldh [rDIV], a
  ld a, -16
  ldh [rTIMA], a
  ld b, 1
  .loop:
    ld a, TACF_4KHZ|TACF_START  ; 2
    ldh [rTAC], a      ; 5 [WRITE]
    ld a, [rTIMA]      ; 8
    or a               ; 9
    or a               ; 10
    or a               ; 11
    jr z, .loopdone    ; 13
    xor a              ; 14
    ldh [rTAC], a      ; 17 [WRITE]
    or a               ; 18
    or a               ; 19
    inc a              ; 21
    inc b              ; 21
    jr nz, .loop       ; 24
  .loopdone:
  jp pass_if_A_eq_0

coin_initial_nr52:
  jr .start
  db "Initial NR52",10
  db "FF26=F0 on Super Game Boy;",10
  db "F1 otherwise",0
.start:
  ldh a, [hCapability]
  rra  ; CF = 1 for SGB or 0 otherwise
  ld a, [initial_nr52]  ; A = $F1 for SGB or $F0 otherwise
  ld b, b
  adc low(-$F1)
  jp pass_if_A_eq_0

coin_no_29:
  jr .start
  db "Always pass for now",0
.start:
  or a
  ret

coin_no_30:
  jr .start
  db "Always pass for now",0
.start:
  or a
  ret

coin_no_31:
  jr .start
  db "Always pass for now",0
.start:
  or a
  ret

coin_no_32:
  jr .start
  db "Always pass for now",0
.start:
  or a
  ret

coin_no_33:
  jr .start
  db "Always pass for now",0
.start:
  or a
  ret

coin_no_34:
  jr .start
  db "Always pass for now",0
.start:
  or a
  ret

coin_no_35:
  jr .start
  db "Always pass for now",0
.start:
  or a
  ret

coin_no_36:
  jr .start
  db "Always pass for now",0
.start:
  or a
  ret

coin_no_37:
  jr .start
  db "Always pass for now",0
.start:
  or a
  ret

; This is where I want to start making tests that behave differently
; in GBC mode vs. DMG mode.  I'll start implementing these once I
; allocate 40 coins.
coin_wave_ram_retrigger:
  jr .start
  db "NYA Retrigger corrupts wave",10
  db "Playing another note without",10
  db "unlocking and relocking wave",10
  db "RAM corrupts it on B&W only",0
.start:
  call init_silent_apu
  or a
  ret

coin_gbc_palette_readback:
  jr .start
  db "NYA GBC CRAM readable",10
  db "Can read palette during",10
  db "vblank on GBC only",0
.start:
  or a
  ret

coin_stat_write_ff:
  jr .start
  db "NYA STAT briefly enables all",10
  db "Writing 0 to FF41 during",10
  db "mode 0, 1, 2, or LY=LYC",10
  db "fires interrupt on B&W only",0
.start:
  or a
  ret

